/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,26],$V1=[1,18],$V2=[1,32],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[1,20],$V7=[1,21],$V8=[1,22],$V9=[1,23],$Va=[1,24],$Vb=[1,27],$Vc=[1,28],$Vd=[1,29],$Ve=[1,30],$Vf=[1,31],$Vg=[1,19],$Vh=[5,8,9,12,13,29,30,31,37,44,45,47,49,53,55,56,57,58,59,60,61],$Vi=[1,47],$Vj=[1,49],$Vk=[1,46],$Vl=[1,39],$Vm=[1,40],$Vn=[1,41],$Vo=[1,42],$Vp=[1,43],$Vq=[1,44],$Vr=[1,45],$Vs=[1,52],$Vt=[1,53],$Vu=[1,56],$Vv=[1,58],$Vw=[1,70],$Vx=[1,67],$Vy=[1,68],$Vz=[1,69],$VA=[1,71],$VB=[1,72],$VC=[1,73],$VD=[1,74],$VE=[1,75],$VF=[1,76],$VG=[1,77],$VH=[1,78],$VI=[1,79],$VJ=[1,80],$VK=[1,81],$VL=[1,82],$VM=[14,36,42,54,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],$VN=[14,35,36],$VO=[2,32],$VP=[1,102],$VQ=[5,8,9,12,13,29,30,31,37,41,44,45,47,49,53,55,56,57,58,59,60,61,66,70,71,87,88,89,90,91],$VR=[5,8,9,12,13,14,29,30,31,36,37,42,44,45,47,49,53,54,55,56,57,58,59,60,61,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],$VS=[36,42],$VT=[5,8,9,12,13,29,30,31,37,44,45,47,48,49,53,55,56,57,58,59,60,61,66],$VU=[9,41,59,70,71,87,88,89,90,91],$VV=[2,53],$VW=[1,140],$VX=[1,139],$VY=[1,151],$VZ=[8,13],$V_=[14,36,42,54,70,74,79,80,81,82,83,84,85,86],$V$=[14,36,42,54,70,74,75,76,78,79,80,81,82,83,84,85,86],$V01=[14,36,42,54,79,80,81,82,83,84,85,86],$V11=[14,36,42,54,83,84,85,86],$V21=[12,53,55],$V31=[9,12,56,57,58,59,60,66],$V41=[2,37],$V51=[1,196];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LIS_INSTRUCCIONES":4,"EOF":5,"CLASE":6,"IMPORTS":7,"class":8,"identificador":9,"{":10,"LIS_INSTRU_CLASS":11,"}":12,"import":13,";":14,"INSTRU_CLASS":15,"DECLARACION":16,"ASIGNACION":17,"MAIN":18,"METODO":19,"FUNCION":20,"INSTRUCCION":21,"PRINT":22,"WHILE":23,"DOWHILE":24,"FOR":25,"IF":26,"SWITCH":27,"LLAMADA_FUN":28,"continue":29,"break":30,"return":31,"EX":32,"TIPO":33,"LISTA_ID":34,"=":35,",":36,"while":37,"CONDICION":38,"BLOQUE_LISINSTRUCCIONES":39,"CASE_LISINSTRUCCIONES":40,"(":41,")":42,"CON_FOR":43,"do":44,"for":45,"INIFOR":46,"if":47,"else":48,"switch":49,"LIS_CASES":50,"C_DEFAULT":51,"CASE":52,"case":53,":":54,"default":55,"int":56,"double":57,"boolean":58,"char":59,"String":60,"System":61,".":62,"out":63,"print":64,"println":65,"void":66,"main":67,"LIS_PARAMETROS":68,"LIS_PARCALL":69,"-":70,"!":71,"++":72,"--":73,"+":74,"*":75,"/":76,"^":77,"mod":78,"<":79,">":80,">=":81,"<=":82,"==":83,"!=":84,"||":85,"&&":86,"entero":87,"decimal":88,"true":89,"false":90,"cadena":91,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"class",9:"identificador",10:"{",12:"}",13:"import",14:";",29:"continue",30:"break",31:"return",35:"=",36:",",37:"while",41:"(",42:")",44:"do",45:"for",47:"if",48:"else",49:"switch",53:"case",54:":",55:"default",56:"int",57:"double",58:"boolean",59:"char",60:"String",61:"System",62:".",63:"out",64:"print",65:"println",66:"void",67:"main",70:"-",71:"!",72:"++",73:"--",74:"+",75:"*",76:"/",77:"^",78:"mod",79:"<",80:">",81:">=",82:"<=",83:"==",84:"!=",85:"||",86:"&&",87:"entero",88:"decimal",89:"true",90:"false",91:"cadena"},
productions_: [0,[3,2],[6,6],[6,5],[7,4],[7,3],[11,2],[11,1],[15,1],[15,1],[15,1],[15,1],[15,1],[4,2],[4,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,2],[21,2],[21,2],[21,3],[21,1],[16,5],[16,3],[34,3],[34,1],[23,3],[39,3],[39,2],[40,1],[40,0],[38,3],[43,1],[24,5],[25,8],[46,1],[46,1],[26,3],[26,5],[26,5],[27,6],[27,5],[50,2],[50,1],[52,4],[51,3],[51,0],[33,1],[33,1],[33,1],[33,1],[33,1],[17,4],[22,9],[22,9],[18,5],[19,6],[19,5],[20,6],[20,5],[68,4],[68,2],[69,3],[69,1],[28,4],[28,3],[32,2],[32,2],[32,2],[32,2],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new Tree($$[$0-1]); return this.$;
break;
case 2:
 this.$ = new Clase($$[$0-5], $$[$0-3], $$[$0-1], _$.first_line, _$.first_column); 
break;
case 3:
 this.$ = new Clase([], $$[$0-3], $$[$0-1], _$.first_line, _$.first_column); 
break;
case 4:
 this.$ = $$[$0-3]; this.$.push($$[$0-1]); 
break;
case 5:
 this.$ = [$$[$0-1]]; 
break;
case 6: case 13: case 49:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 7: case 14: case 32: case 50:
 this.$ = [$$[$0]]; 
break;
case 8: case 9: case 10: case 11: case 12: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 28: case 36: case 39: case 42: case 43:
this.$ = $$[$0];
break;
case 24:
this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 25:
this.$ = new Break( _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 26:
this.$ = new ReturnM(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 27:
this.$ = new ReturnF($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 29:
this.$ = new Declaracion($$[$0-4], $$[$0-3], $$[$0-1], _$.first_line, _$.first_column);
break;
case 30:
this.$ = new Declaracion($$[$0-2], $$[$0-1], null, _$.first_line, _$.first_column);
break;
case 31:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 33:
this.$ = new While($$[$0-1], $$[$0], _$.first_line, _$.first_column);
break;
case 34: case 38:
this.$ = $$[$0-1];
break;
case 35:
this.$ = [];
break;
case 37: case 53:
this.$ = []; 
break;
case 40:
this.$ = new DoWhile($$[$0-1], $$[$0-3], _$.first_line, _$.first_column);
break;
case 41:
this.$ = new For($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$.first_line, _$.first_column);
break;
case 44:
this.$ = new If($$[$0-1], $$[$0], [], _$.first_line, _$.first_column);
break;
case 45:
this.$ = new If($$[$0-3], $$[$0-2], $$[$0], _$.first_line, _$.first_column);
break;
case 46:
this.$ = new If($$[$0-3], $$[$0-2], [$$[$0]], _$.first_line, _$.first_column);
break;
case 47:
 this.$ = new Switch($$[$0-4], $$[$0-2], $$[$0-1], _$.first_line, _$.first_column);  
break;
case 48:
 this.$ = new Switch($$[$0-3], [], $$[$0-1], _$.first_line, _$.first_column);  
break;
case 51:
 this.$ = new CaseSwitch($$[$0-2], $$[$0], _$.first_line, _$.first_column); 
break;
case 52:
 this.$ = [new DefaultSwitch( $$[$0], _$.first_line, _$.first_column)]; 
break;
case 54:
this.$ = new Tipo(types.int);
break;
case 55:
this.$ = new Tipo(types.double);
break;
case 56:
this.$ = new Tipo(types.boolean);
break;
case 57:
this.$ = new Tipo(types.char);
break;
case 58:
this.$ = new Tipo(types.String);
break;
case 59:
 this.$ = new Asignacion($$[$0-3], $$[$0-1], _$.first_line, _$.first_column); 
break;
case 60: case 61:
 this.$ = new Imprimir($$[$0-2], _$.first_line, _$.first_column);
break;
case 62:
 this.$ = new VoidMain( $$[$0], _$.first_line, _$.first_column); 
break;
case 63:
 this.$ = new Metodo($$[$0-4], $$[$0-2], $$[$0], _$.first_line, _$.first_column); 
break;
case 64:
 this.$ = new Metodo($$[$0-3], [], $$[$0], _$.first_line, _$.first_column); 
break;
case 65:
 this.$ = new Funcion($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$.first_line, _$.first_column); 
break;
case 66:
 this.$ = new Funcion($$[$0-4], $$[$0-3], [], $$[$0], _$.first_line, _$.first_column); 
break;
case 67:
 this.$ = $$[$0-3]; this.$.push(new Parametros( $$[$0-1], $$[$0], _$.first_line, _$.first_column)); 
break;
case 68:
 this.$ = [new Parametros( $$[$0-1], $$[$0], _$.first_line, _$.first_column)]; 
break;
case 69:
 this.$ = $$[$0-2]; this.$.push(new ParametroCall( $$[$0], _$.first_line, _$.first_column)); 
break;
case 70:
 this.$ = [new ParametroCall( $$[$0], _$.first_line, _$.first_column)]; 
break;
case 71:
 this.$ = new LlamadaF($$[$0-3], $$[$0-1],  _$.first_line, _$.first_column); 
break;
case 72:
 this.$ = new LlamadaF($$[$0-2], [],  _$.first_line, _$.first_column); 
break;
case 73:
 this.$ = new Aritmetica($$[$0], null, '-', _$.first_line, _$.first_column); 
break;
case 74:
 
break;
case 75:
 this.$ = new Aritmetica($$[$0-1], null, '++', _$.first_line, _$.first_column); 
break;
case 76:
 this.$ = new Aritmetica($$[$0-1], null, '--', _$.first_line, _$.first_column); 
break;
case 77:
 this.$ = new Aritmetica($$[$0-2], $$[$0], '+', _$.first_line, _$.first_column); 
break;
case 78:
 this.$ = new Aritmetica($$[$0-2], $$[$0], '-', _$.first_line, _$.first_column); 
break;
case 79:
 this.$ = new Aritmetica($$[$0-2], $$[$0], '*', _$.first_line, _$.first_column); 
break;
case 80:
 this.$ = new Aritmetica($$[$0-2], $$[$0], '/', _$.first_line, _$.first_column); 
break;
case 81:
 this.$ = new Aritmetica($$[$0-2], $$[$0], '^', _$.first_line, _$.first_column); 
break;
case 82:
 this.$ = new Aritmetica($$[$0-2], $$[$0], '%', _$.first_line, _$.first_column); 
break;
case 83:
 this.$ = new Relacional($$[$0-2], $$[$0], '<', _$.first_line, _$.first_column); 
break;
case 84:
 this.$ = new Relacional($$[$0-2], $$[$0], '>', _$.first_line, _$.first_column); 
break;
case 85:
 this.$ = new Relacional($$[$0-2], $$[$0], '>=', _$.first_line, _$.first_column);
break;
case 86:
 this.$ = new Relacional($$[$0-2], $$[$0], '<=', _$.first_line, _$.first_column); 
break;
case 87:
 this.$ = new Relacional($$[$0-2], $$[$0], '==', _$.first_line, _$.first_column);
break;
case 88:
 this.$ = new Relacional($$[$0-2], $$[$0], '!=', _$.first_line, _$.first_column); 
break;
case 89:
 this.$ = new Logica($$[$0-2], $$[$0], '&&', _$.first_line, _$.first_column); 
break;
case 90:
 this.$ = new Logica($$[$0-2], $$[$0], '||', _$.first_line, _$.first_column); 
break;
case 91:
 this.$ = new Primitive(new Tipo(types.int), Number($$[$0]), _$.first_line, _$.first_column);
break;
case 92:
 this.$ = new Primitive(new Tipo(types.decimal), Number($$[$0]), _$.first_line, _$.first_column); 
break;
case 93: case 94:
 this.$ = new Primitive(new Tipo(types.boolean), Boolean($$[$0]), _$.first_line, _$.first_column);
break;
case 95:
 this.$ = new Primitive(new Tipo(types.String), String($$[$0]), _$.first_line, _$.first_column);
break;
case 96:
 this.$ = new Primitive(new Tipo(types.char), String($$[$0]), _$.first_line, _$.first_column);
break;
case 97:
 this.$ = new Identificador($$[$0], _$.first_line, _$.first_column); 
break;
case 98:
 this.$ =$$[$0]; 
break;
case 99:
 this.$ = $$[$0-1]; 
break;
}
},
table: [{3:1,4:2,6:16,7:25,8:$V0,9:$V1,13:$V2,16:4,17:5,21:3,22:6,23:7,24:8,25:9,26:10,27:11,28:12,29:$V3,30:$V4,31:$V5,33:17,37:$V6,44:$V7,45:$V8,47:$V9,49:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg},{1:[3]},{5:[1,33],6:16,7:25,8:$V0,9:$V1,13:$V2,16:4,17:5,21:34,22:6,23:7,24:8,25:9,26:10,27:11,28:12,29:$V3,30:$V4,31:$V5,33:17,37:$V6,44:$V7,45:$V8,47:$V9,49:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg},o($Vh,[2,14]),o($Vh,[2,15]),o($Vh,[2,16]),o($Vh,[2,17]),o($Vh,[2,18]),o($Vh,[2,19]),o($Vh,[2,20]),o($Vh,[2,21]),o($Vh,[2,22]),o($Vh,[2,23]),{14:[1,35]},{14:[1,36]},{9:$Vi,14:[1,37],28:48,32:38,41:$Vj,59:$Vk,70:$Vl,71:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},o($Vh,[2,28]),{9:[1,51],34:50},{35:$Vs,41:$Vt},{62:[1,54]},{38:55,41:$Vu},{10:$Vv,39:57},{41:[1,59]},{38:60,41:$Vu},{38:61,41:$Vu},{8:[1,62],13:[1,63]},{9:[1,64]},{9:[2,54]},{9:[2,55]},{9:[2,56]},{9:[2,57]},{9:[2,58]},{9:[1,65]},{1:[2,1]},o($Vh,[2,13]),o($Vh,[2,24]),o($Vh,[2,25]),o($Vh,[2,26]),{14:[1,66],70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL},{9:$Vi,28:48,32:83,41:$Vj,59:$Vk,70:$Vl,71:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{9:$Vi,28:48,32:84,41:$Vj,59:$Vk,70:$Vl,71:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},o($VM,[2,91]),o($VM,[2,92]),o($VM,[2,93]),o($VM,[2,94]),o($VM,[2,95]),o($VM,[2,96]),o($VM,[2,97],{41:$Vt}),o($VM,[2,98]),{9:$Vi,28:48,32:85,41:$Vj,59:$Vk,70:$Vl,71:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{14:[1,87],35:[1,86],36:[1,88]},o($VN,$VO),{9:$Vi,28:48,32:89,41:$Vj,59:$Vk,70:$Vl,71:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{9:$Vi,28:48,32:92,41:$Vj,42:[1,91],59:$Vk,69:90,70:$Vl,71:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{63:[1,93]},{10:$Vv,39:94},{9:$Vi,28:48,32:95,41:$Vj,59:$Vk,70:$Vl,71:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{37:[1,96]},{4:97,6:16,7:25,8:$V0,9:$V1,12:[1,98],13:$V2,16:4,17:5,21:3,22:6,23:7,24:8,25:9,26:10,27:11,28:12,29:$V3,30:$V4,31:$V5,33:17,37:$V6,44:$V7,45:$V8,47:$V9,49:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg},{9:$VP,16:100,17:101,33:17,46:99,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf},{10:$Vv,39:103},{10:[1,104]},{9:[1,105]},{9:[1,106]},{10:[1,107]},{14:[1,108]},o($Vh,[2,27]),o($VM,[2,75]),o($VM,[2,76]),{9:$Vi,28:48,32:109,41:$Vj,59:$Vk,70:$Vl,71:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{9:$Vi,28:48,32:110,41:$Vj,59:$Vk,70:$Vl,71:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{9:$Vi,28:48,32:111,41:$Vj,59:$Vk,70:$Vl,71:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{9:$Vi,28:48,32:112,41:$Vj,59:$Vk,70:$Vl,71:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{9:$Vi,28:48,32:113,41:$Vj,59:$Vk,70:$Vl,71:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{9:$Vi,28:48,32:114,41:$Vj,59:$Vk,70:$Vl,71:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{9:$Vi,28:48,32:115,41:$Vj,59:$Vk,70:$Vl,71:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{9:$Vi,28:48,32:116,41:$Vj,59:$Vk,70:$Vl,71:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{9:$Vi,28:48,32:117,41:$Vj,59:$Vk,70:$Vl,71:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{9:$Vi,28:48,32:118,41:$Vj,59:$Vk,70:$Vl,71:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{9:$Vi,28:48,32:119,41:$Vj,59:$Vk,70:$Vl,71:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{9:$Vi,28:48,32:120,41:$Vj,59:$Vk,70:$Vl,71:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{9:$Vi,28:48,32:121,41:$Vj,59:$Vk,70:$Vl,71:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{9:$Vi,28:48,32:122,41:$Vj,59:$Vk,70:$Vl,71:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},o($VM,[2,73]),o([14,36,42,54,70,72,73,74,75,76,78,79,80,81,82,83,84,85,86],[2,74],{77:$VC}),{42:[1,123],70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL},{9:$Vi,28:48,32:124,41:$Vj,59:$Vk,70:$Vl,71:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},o($VQ,[2,30]),{9:[1,125]},{14:[1,126],70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL},{36:[1,128],42:[1,127]},o($VR,[2,72]),o($VS,[2,70],{70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL}),{62:[1,129]},o($Vh,[2,33]),{42:[1,130],70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL},{38:131,41:$Vu},{6:16,7:25,8:$V0,9:$V1,12:[1,132],13:$V2,16:4,17:5,21:34,22:6,23:7,24:8,25:9,26:10,27:11,28:12,29:$V3,30:$V4,31:$V5,33:17,37:$V6,44:$V7,45:$V8,47:$V9,49:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg},o($VT,[2,35]),{9:$Vi,28:48,32:134,41:$Vj,43:133,59:$Vk,70:$Vl,71:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},o($VU,[2,42]),o($VU,[2,43]),{35:$Vs},o($Vh,[2,44],{48:[1,135]}),{12:$VV,50:136,51:137,52:138,53:$VW,55:$VX},{10:[1,141]},{14:[1,142]},{9:$VP,11:143,15:144,16:145,17:146,18:147,19:148,20:149,33:150,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,66:$VY},o($VZ,[2,5]),o($V_,[2,77],{72:$Vx,73:$Vy,75:$VA,76:$VB,77:$VC,78:$VD}),o($V_,[2,78],{72:$Vx,73:$Vy,75:$VA,76:$VB,77:$VC,78:$VD}),o($V$,[2,79],{72:$Vx,73:$Vy,77:$VC}),o($V$,[2,80],{72:$Vx,73:$Vy,77:$VC}),o($VM,[2,81]),o($V$,[2,82],{72:$Vx,73:$Vy,77:$VC}),o($V01,[2,83],{70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($V01,[2,84],{70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($V01,[2,85],{70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($V01,[2,86],{70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($V11,[2,87],{70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH}),o($V11,[2,88],{70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH}),o([14,36,42,54,85],[2,89],{70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,86:$VL}),o([14,36,42,54,85,86],[2,90],{70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ}),o($VM,[2,99]),{14:[1,152],70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL},o($VN,[2,31]),o($VQ,[2,59]),o($VR,[2,71]),{9:$Vi,28:48,32:153,41:$Vj,59:$Vk,70:$Vl,71:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{64:[1,154],65:[1,155]},o([10,14],[2,38]),{14:[1,156]},o($VT,[2,34]),{14:[1,157]},{14:[2,39],70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL},{10:$Vv,26:159,39:158,47:$V9},{12:$VV,51:160,52:161,53:$VW,55:$VX},{12:[1,162]},o($V21,[2,50]),{54:[1,163]},{9:$Vi,28:48,32:164,41:$Vj,59:$Vk,70:$Vl,71:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{9:$VP,11:165,15:144,16:145,17:146,18:147,19:148,20:149,33:150,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,66:$VY},o($VZ,[2,4]),{9:$VP,12:[1,166],15:167,16:145,17:146,18:147,19:148,20:149,33:150,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,66:$VY},o($V31,[2,7]),o($V31,[2,8]),o($V31,[2,9]),o($V31,[2,10]),o($V31,[2,11]),o($V31,[2,12]),{9:[1,168],34:50},{9:[1,170],67:[1,169]},o($VQ,[2,29]),o($VS,[2,69],{70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL}),{41:[1,171]},{41:[1,172]},o($Vh,[2,40]),{9:$Vi,28:48,32:173,41:$Vj,59:$Vk,70:$Vl,71:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},o($Vh,[2,45]),o($Vh,[2,46]),{12:[1,174]},o($V21,[2,49]),o($Vh,[2,48]),{4:176,6:16,7:25,8:$V0,9:$V1,12:$V41,13:$V2,16:4,17:5,21:3,22:6,23:7,24:8,25:9,26:10,27:11,28:12,29:$V3,30:$V4,31:$V5,33:17,37:$V6,40:175,44:$V7,45:$V8,47:$V9,49:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg},{54:[1,177],70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL},{9:$VP,12:[1,178],15:167,16:145,17:146,18:147,19:148,20:149,33:150,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,66:$VY},o($Vh,[2,3]),o($V31,[2,6]),o($VN,$VO,{41:[1,179]}),{41:[1,180]},{41:[1,181]},{9:$Vi,28:48,32:182,41:$Vj,59:$Vk,70:$Vl,71:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{9:$Vi,28:48,32:183,41:$Vj,59:$Vk,70:$Vl,71:$Vm,87:$Vn,88:$Vo,89:$Vp,90:$Vq,91:$Vr},{42:[1,184],70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL},o($Vh,[2,47]),{12:[2,52]},o($V21,[2,36],{16:4,17:5,22:6,23:7,24:8,25:9,26:10,27:11,28:12,6:16,33:17,7:25,21:34,8:$V0,9:$V1,13:$V2,29:$V3,30:$V4,31:$V5,37:$V6,44:$V7,45:$V8,47:$V9,49:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg}),o($V21,$V41,{21:3,16:4,17:5,22:6,23:7,24:8,25:9,26:10,27:11,28:12,6:16,33:17,7:25,4:176,40:185,8:$V0,9:$V1,13:$V2,29:$V3,30:$V4,31:$V5,37:$V6,44:$V7,45:$V8,47:$V9,49:$Va,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,61:$Vg}),o($Vh,[2,2]),{33:188,42:[1,187],56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,68:186},{42:[1,189]},{33:188,42:[1,191],56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf,68:190},{42:[1,192],70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL},{42:[1,193],70:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL},{10:$Vv,39:194},o($V21,[2,51]),{36:$V51,42:[1,195]},{10:$Vv,39:197},{9:[1,198]},{10:$Vv,39:199},{36:$V51,42:[1,200]},{10:$Vv,39:201},{14:[1,202]},{14:[1,203]},o($Vh,[2,41]),{10:$Vv,39:204},{33:205,56:$Vb,57:$Vc,58:$Vd,59:$Ve,60:$Vf},o($V31,[2,66]),o($VS,[2,68]),o($V31,[2,62]),{10:$Vv,39:206},o($V31,[2,64]),o($Vh,[2,60]),o($Vh,[2,61]),o($V31,[2,65]),{9:[1,207]},o($V31,[2,63]),o($VS,[2,67])],
defaultActions: {27:[2,54],28:[2,55],29:[2,56],30:[2,57],31:[2,58],33:[2,1],175:[2,52]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Primitive} = require('../Expresiones/Primitive');
    const {Aritmetica} = require('../Expresiones/Aritmetica');
    const {Relacional} = require('../Expresiones/Relacional');
    /*const {Continue} = require('../Expresiones/Continue');
    const {Break} = require('../Expresiones/Break');*/
    const {Logica} = require('../Expresiones/Logica');
    
    const {Identificador} = require('../Expresiones/Identificador');
    const {Imprimir} = require('../Instrucciones/Imprimir');
    const {If} = require('../Instrucciones/If');
    const {While} = require('../Instrucciones/While');
    const {DoWhile} = require('../Instrucciones/DoWhile');
    const {For} = require('../Instrucciones/For');
    const {Switch} = require('../Instrucciones/Switch');
    const {CaseSwitch} = require('../Instrucciones/CaseSwitch');
    const {DefaultSwitch} = require('../Instrucciones/DefaultSwitch');

    const {Clase} = require('../ClasesF/Clase');
    const {Continue} = require('../ClasesF/Continue');
    const {Break} = require('../ClasesF/Break');

    const {ReturnM} = require('../ClasesF/ReturnM');
    const {ReturnF} = require('../ClasesF/ReturnF');

    const {VoidMain} = require('../ClasesF/VoidMain');
    const {Metodo} = require('../ClasesF/Metodo');
    const {Parametros} = require('../ClasesF/Parametros');
    const {Funcion} = require('../ClasesF/Funcion');
    const {ParametroCall} = require('../ClasesF/ParametroCall');
    const {LlamadaF} = require('../ClasesF/LlamadaF');
    
    const {Declaracion} = require('../Instrucciones/Declaracion');
    const {Asignacion} = require('../Instrucciones/Asignacion');
    //const {Excepcion} = require('../utils/Exception');*/
    const {Tipo, types} = require('../Abstracto/Tipo');
    const {Tree} = require('../Simbols/Tree');

    let lis_Errores=require('../Errores/LisErrores');
    let NError=require('../Errores/NodeErr');
    //const {NodeErr} = require('../Errores/NodeErr');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/*comen unilinea*/
break;
case 2:/*comen multilinea*/
break;
case 3:return 88 
break;
case 4:return 87 
break;
case 5:return 91
break;
case 6:return 59
break;
case 7:return 75
break;
case 8:return 76
break;
case 9:return 73
break;
case 10:return 70
break;
case 11:return 72
break;
case 12:return 74
break;
case 13:return 75
break;
case 14:return 77
break;
case 15:return 78
break;
case 16:return 79
break;
case 17:return 80
break;
case 18:return 82
break;
case 19:return 81
break;
case 20:return 83
break;
case 21:return 84
break;
case 22:return 85
break;
case 23:return 86
break;
case 24:return 71
break;
case 25:return 41
break;
case 26:return 42  
break;
case 27:return 10
break;
case 28:return 12  
break;
case 29:return 14
break;
case 30:return 36
break;
case 31:return 35
break;
case 32:return 56
break;
case 33:return 57
break;
case 34:return 58
break;
case 35:return 59
break;
case 36:return 60
break;
case 37:return 89
break;
case 38:return 90
break;
case 39:return 47
break;
case 40:return 48
break;
case 41:return 49
break;
case 42:return 53
break;
case 43:return 30
break;
case 44:return 55
break;
case 45:return 37
break;
case 46:return 44
break;
case 47:return 45
break;
case 48:return 29
break;
case 49:return 61
break;
case 50:return 63
break;
case 51:return 64
break;
case 52:return 65
break;
case 53:return 62
break;
case 54:return 54
break;
case 55:return 66
break;
case 56:return 67
break;
case 57:return 31
break;
case 58:return 8
break;
case 59:return 13
break;
case 60:return 9
break;
case 61:return 5
break;
case 62:lis_Errores.LisErrores.add(new NError.NodeErr("Lexico","Caracter invalido: "+yy_.yytext,yy_.yylloc.first_line, yy_.yylloc.first_column))
break;
}
},
rules: [/^(?:\s+)/i,/^(?:(\/\/.*\r\n)|(\/\/.*\n)|(\/\/.*\r))/i,/^(?:\/\*\/*([^*/]|[^*]\/|\*[^/])*\**\*\/)/i,/^(?:([0-9]+(\.[0-9]+)?))/i,/^(?:([0-9]+))/i,/^(?:(("[^"]*")))/i,/^(?:([\'][^\'\n][\']))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:,)/i,/^(?:=)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:String\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:continue\b)/i,/^(?:System\b)/i,/^(?:out\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:\.)/i,/^(?::)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:return\b)/i,/^(?:class\b)/i,/^(?:import\b)/i,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}