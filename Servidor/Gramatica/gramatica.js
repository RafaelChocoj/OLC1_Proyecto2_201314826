/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,17],$V2=[1,18],$V3=[1,19],$V4=[1,20],$V5=[1,21],$V6=[1,23],$V7=[1,24],$V8=[1,25],$V9=[1,26],$Va=[1,27],$Vb=[1,16],$Vc=[1,22],$Vd=[5,23,24,28,33,34,36,38,42,44,45,46,47,48,49,50,55],$Ve=[1,35],$Vf=[1,37],$Vg=[19,21,22],$Vh=[1,55],$Vi=[1,56],$Vj=[1,54],$Vk=[1,47],$Vl=[1,48],$Vm=[1,49],$Vn=[1,50],$Vo=[1,51],$Vp=[1,52],$Vq=[1,53],$Vr=[5,23,24,28,30,33,34,36,38,42,44,45,46,47,48,49,50,55,58,59,75,76,77,78,79],$Vs=[1,76],$Vt=[1,73],$Vu=[1,74],$Vv=[1,75],$Vw=[1,77],$Vx=[1,78],$Vy=[1,79],$Vz=[1,80],$VA=[1,81],$VB=[1,82],$VC=[1,83],$VD=[1,84],$VE=[1,85],$VF=[1,86],$VG=[1,87],$VH=[1,88],$VI=[21,31,43,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],$VJ=[5,23,24,28,33,34,36,37,38,42,44,45,46,47,48,49,50,55],$VK=[23,30,48,58,59,75,76,77,78,79],$VL=[2,38],$VM=[1,103],$VN=[1,102],$VO=[28,42,44],$VP=[21,31,43,58,62,67,68,69,70,71,72,73,74],$VQ=[21,31,43,58,62,63,64,66,67,68,69,70,71,72,73,74],$VR=[21,31,43,67,68,69,70,71,72,73,74],$VS=[21,31,43,71,72,73,74],$VT=[2,22],$VU=[22,31];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LIS_INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ASIGNACION":8,"PRINT":9,"WHILE":10,"DOWHILE":11,"FOR":12,"IF":13,"SWITCH":14,"MAIN":15,"METODO":16,"TIPO":17,"LISTA_ID":18,"=":19,"EX":20,";":21,",":22,"identificador":23,"while":24,"CONDICION":25,"BLOQUE_LISINSTRUCCIONES":26,"{":27,"}":28,"CASE_LISINSTRUCCIONES":29,"(":30,")":31,"CON_FOR":32,"do":33,"for":34,"INIFOR":35,"if":36,"else":37,"switch":38,"LIS_CASES":39,"C_DEFAULT":40,"CASE":41,"case":42,":":43,"default":44,"int":45,"double":46,"boolean":47,"char":48,"String":49,"System":50,".":51,"out":52,"print":53,"println":54,"void":55,"main":56,"LIS_PARAMETROS":57,"-":58,"!":59,"++":60,"--":61,"+":62,"*":63,"/":64,"^":65,"mod":66,"<":67,">":68,">=":69,"<=":70,"==":71,"!=":72,"||":73,"&&":74,"entero":75,"decimal":76,"true":77,"false":78,"cadena":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",19:"=",21:";",22:",",23:"identificador",24:"while",27:"{",28:"}",30:"(",31:")",33:"do",34:"for",36:"if",37:"else",38:"switch",42:"case",43:":",44:"default",45:"int",46:"double",47:"boolean",48:"char",49:"String",50:"System",51:".",52:"out",53:"print",54:"println",55:"void",56:"main",58:"-",59:"!",60:"++",61:"--",62:"+",63:"*",64:"/",65:"^",66:"mod",67:"<",68:">",69:">=",70:"<=",71:"==",72:"!=",73:"||",74:"&&",75:"entero",76:"decimal",77:"true",78:"false",79:"cadena"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[7,3],[18,3],[18,1],[10,3],[26,3],[26,2],[29,1],[29,0],[25,3],[32,1],[11,5],[12,8],[35,1],[35,1],[13,3],[13,5],[13,5],[14,6],[14,5],[39,2],[39,1],[41,4],[40,3],[40,0],[17,1],[17,1],[17,1],[17,1],[17,1],[8,4],[9,9],[9,9],[15,5],[16,6],[16,5],[57,4],[57,2],[20,2],[20,2],[20,2],[20,2],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new Tree($$[$0-1]); return this.$;
break;
case 2: case 34:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: case 17: case 35:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 21: case 24: case 27: case 28:
this.$ = $$[$0];
break;
case 14:
this.$ = new Declaracion($$[$0-4], $$[$0-3], $$[$0-1], _$.first_line, _$.first_column);
break;
case 15:
this.$ = new Declaracion($$[$0-2], $$[$0-1], null, _$.first_line, _$.first_column);
break;
case 16:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 18:
this.$ = new While($$[$0-1], $$[$0], _$.first_line, _$.first_column);
break;
case 19: case 23:
this.$ = $$[$0-1];
break;
case 20:
this.$ = [];
break;
case 22: case 38:
this.$ = []; 
break;
case 25:
this.$ = new DoWhile($$[$0-1], $$[$0-3], _$.first_line, _$.first_column);
break;
case 26:
this.$ = new For($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$.first_line, _$.first_column);
break;
case 29:
this.$ = new If($$[$0-1], $$[$0], [], _$.first_line, _$.first_column);
break;
case 30:
this.$ = new If($$[$0-3], $$[$0-2], $$[$0], _$.first_line, _$.first_column);
break;
case 31:
this.$ = new If($$[$0-3], $$[$0-2], [$$[$0]], _$.first_line, _$.first_column);
break;
case 32:
 this.$ = new Switch($$[$0-4], $$[$0-2], $$[$0-1], _$.first_line, _$.first_column);  
break;
case 33:
 this.$ = new Switch($$[$0-3], [], $$[$0-1], _$.first_line, _$.first_column);  
break;
case 36:
 this.$ = new CaseSwitch($$[$0-2], $$[$0], _$.first_line, _$.first_column); 
break;
case 37:
 this.$ = [new DefaultSwitch( $$[$0], _$.first_line, _$.first_column)]; 
break;
case 39:
this.$ = new Tipo(types.int);
break;
case 40:
this.$ = new Tipo(types.double);
break;
case 41:
this.$ = new Tipo(types.boolean);
break;
case 42:
this.$ = new Tipo(types.char);
break;
case 43:
this.$ = new Tipo(types.String);
break;
case 44:
 this.$ = new Asignacion($$[$0-3], $$[$0-1], _$.first_line, _$.first_column); 
break;
case 45: case 46:
 this.$ = new Imprimir($$[$0-2], _$.first_line, _$.first_column);
break;
case 47:
 this.$ = new VoidMain( $$[$0], _$.first_line, _$.first_column); 
break;
case 48:
 this.$ = new Metodo($$[$0-4], $$[$0-2], $$[$0], _$.first_line, _$.first_column); 
break;
case 49:
 this.$ = new Metodo($$[$0-3], [], $$[$0], _$.first_line, _$.first_column); 
break;
case 50:
 this.$ = $$[$0-3]; this.$.push(new Parametros( $$[$0-1], $$[$0], _$.first_line, _$.first_column)); 
break;
case 51:
 this.$ = [new Parametros( $$[$0-1], $$[$0], _$.first_line, _$.first_column)]; 
break;
case 52:
 this.$ = new Aritmetica($$[$0], null, '-', _$.first_line, _$.first_column); 
break;
case 53:
 
break;
case 54:
 this.$ = new Aritmetica($$[$0-1], null, '++', _$.first_line, _$.first_column); 
break;
case 55:
 this.$ = new Aritmetica($$[$0-1], null, '--', _$.first_line, _$.first_column); 
break;
case 56:
 this.$ = new Aritmetica($$[$0-2], $$[$0], '+', _$.first_line, _$.first_column); 
break;
case 57:
 this.$ = new Aritmetica($$[$0-2], $$[$0], '-', _$.first_line, _$.first_column); 
break;
case 58:
 this.$ = new Aritmetica($$[$0-2], $$[$0], '*', _$.first_line, _$.first_column); 
break;
case 59:
 this.$ = new Aritmetica($$[$0-2], $$[$0], '/', _$.first_line, _$.first_column); 
break;
case 60:
 this.$ = new Aritmetica($$[$0-2], $$[$0], '^', _$.first_line, _$.first_column); 
break;
case 61:
 this.$ = new Aritmetica($$[$0-2], $$[$0], '%', _$.first_line, _$.first_column); 
break;
case 62:
 this.$ = new Relacional($$[$0-2], $$[$0], '<', _$.first_line, _$.first_column); 
break;
case 63:
 this.$ = new Relacional($$[$0-2], $$[$0], '>', _$.first_line, _$.first_column); 
break;
case 64:
 this.$ = new Relacional($$[$0-2], $$[$0], '>=', _$.first_line, _$.first_column);
break;
case 65:
 this.$ = new Relacional($$[$0-2], $$[$0], '<=', _$.first_line, _$.first_column); 
break;
case 66:
 this.$ = new Relacional($$[$0-2], $$[$0], '==', _$.first_line, _$.first_column);
break;
case 67:
 this.$ = new Relacional($$[$0-2], $$[$0], '!=', _$.first_line, _$.first_column); 
break;
case 68:
 this.$ = new Logica($$[$0-2], $$[$0], '&&', _$.first_line, _$.first_column); 
break;
case 69:
 this.$ = new Logica($$[$0-2], $$[$0], '||', _$.first_line, _$.first_column); 
break;
case 70:
 this.$ = new Primitive(new Tipo(types.int), Number($$[$0]), _$.first_line, _$.first_column);
break;
case 71:
 this.$ = new Primitive(new Tipo(types.decimal), Number($$[$0]), _$.first_line, _$.first_column); 
break;
case 72: case 73:
 this.$ = new Primitive(new Tipo(types.boolean), Boolean($$[$0]), _$.first_line, _$.first_column);
break;
case 74:
 this.$ = new Primitive(new Tipo(types.String), String($$[$0]), _$.first_line, _$.first_column);
break;
case 75:
 this.$ = new Primitive(new Tipo(types.char), String($$[$0]), _$.first_line, _$.first_column);
break;
case 76:
 this.$ = new Identificador($$[$0], _$.first_line, _$.first_column); 
break;
case 77:
 this.$ = $$[$0-1]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,23:$V0,24:$V1,33:$V2,34:$V3,36:$V4,38:$V5,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,55:$Vc},{1:[3]},{5:[1,28],6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,23:$V0,24:$V1,33:$V2,34:$V3,36:$V4,38:$V5,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,55:$Vc},o($Vd,[2,3]),o($Vd,[2,4]),o($Vd,[2,5]),o($Vd,[2,6]),o($Vd,[2,7]),o($Vd,[2,8]),o($Vd,[2,9]),o($Vd,[2,10]),o($Vd,[2,11]),o($Vd,[2,12]),o($Vd,[2,13]),{18:30,23:[1,31]},{19:[1,32]},{51:[1,33]},{25:34,30:$Ve},{26:36,27:$Vf},{30:[1,38]},{25:39,30:$Ve},{25:40,30:$Ve},{23:[1,42],56:[1,41]},{23:[2,39]},{23:[2,40]},{23:[2,41]},{23:[2,42]},{23:[2,43]},{1:[2,1]},o($Vd,[2,2]),{19:[1,43],21:[1,44],22:[1,45]},o($Vg,[2,17]),{20:46,23:$Vh,30:$Vi,48:$Vj,58:$Vk,59:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq},{52:[1,57]},{26:58,27:$Vf},{20:59,23:$Vh,30:$Vi,48:$Vj,58:$Vk,59:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq},{24:[1,60]},{4:61,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,23:$V0,24:$V1,28:[1,62],33:$V2,34:$V3,36:$V4,38:$V5,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,55:$Vc},{7:64,8:65,17:14,23:$V0,35:63,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va},{26:66,27:$Vf},{27:[1,67]},{30:[1,68]},{30:[1,69]},{20:70,23:$Vh,30:$Vi,48:$Vj,58:$Vk,59:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq},o($Vr,[2,15]),{23:[1,71]},{21:[1,72],58:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH},{20:89,23:$Vh,30:$Vi,48:$Vj,58:$Vk,59:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq},{20:90,23:$Vh,30:$Vi,48:$Vj,58:$Vk,59:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq},o($VI,[2,70]),o($VI,[2,71]),o($VI,[2,72]),o($VI,[2,73]),o($VI,[2,74]),o($VI,[2,75]),o($VI,[2,76]),{20:91,23:$Vh,30:$Vi,48:$Vj,58:$Vk,59:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq},{51:[1,92]},o($Vd,[2,18]),{31:[1,93],58:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH},{25:94,30:$Ve},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,23:$V0,24:$V1,28:[1,95],33:$V2,34:$V3,36:$V4,38:$V5,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,55:$Vc},o($VJ,[2,20]),{20:97,23:$Vh,30:$Vi,32:96,48:$Vj,58:$Vk,59:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq},o($VK,[2,27]),o($VK,[2,28]),o($Vd,[2,29],{37:[1,98]}),{28:$VL,39:99,40:100,41:101,42:$VM,44:$VN},{31:[1,104]},{17:107,31:[1,106],45:$V6,46:$V7,47:$V8,48:$V9,49:$Va,57:105},{21:[1,108],58:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH},o($Vg,[2,16]),o($Vr,[2,44]),o($VI,[2,54]),o($VI,[2,55]),{20:109,23:$Vh,30:$Vi,48:$Vj,58:$Vk,59:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq},{20:110,23:$Vh,30:$Vi,48:$Vj,58:$Vk,59:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq},{20:111,23:$Vh,30:$Vi,48:$Vj,58:$Vk,59:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq},{20:112,23:$Vh,30:$Vi,48:$Vj,58:$Vk,59:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq},{20:113,23:$Vh,30:$Vi,48:$Vj,58:$Vk,59:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq},{20:114,23:$Vh,30:$Vi,48:$Vj,58:$Vk,59:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq},{20:115,23:$Vh,30:$Vi,48:$Vj,58:$Vk,59:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq},{20:116,23:$Vh,30:$Vi,48:$Vj,58:$Vk,59:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq},{20:117,23:$Vh,30:$Vi,48:$Vj,58:$Vk,59:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq},{20:118,23:$Vh,30:$Vi,48:$Vj,58:$Vk,59:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq},{20:119,23:$Vh,30:$Vi,48:$Vj,58:$Vk,59:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq},{20:120,23:$Vh,30:$Vi,48:$Vj,58:$Vk,59:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq},{20:121,23:$Vh,30:$Vi,48:$Vj,58:$Vk,59:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq},{20:122,23:$Vh,30:$Vi,48:$Vj,58:$Vk,59:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq},o($VI,[2,52]),o([21,31,43,58,60,61,62,63,64,66,67,68,69,70,71,72,73,74],[2,53],{65:$Vy}),{31:[1,123],58:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH},{53:[1,124],54:[1,125]},o([21,27],[2,23]),{21:[1,126]},o($VJ,[2,19]),{21:[1,127]},{21:[2,24],58:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH},{13:129,26:128,27:$Vf,36:$V4},{28:$VL,40:130,41:131,42:$VM,44:$VN},{28:[1,132]},o($VO,[2,35]),{43:[1,133]},{20:134,23:$Vh,30:$Vi,48:$Vj,58:$Vk,59:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq},{26:135,27:$Vf},{22:[1,137],31:[1,136]},{26:138,27:$Vf},{23:[1,139]},o($Vr,[2,14]),o($VP,[2,56],{60:$Vt,61:$Vu,63:$Vw,64:$Vx,65:$Vy,66:$Vz}),o($VP,[2,57],{60:$Vt,61:$Vu,63:$Vw,64:$Vx,65:$Vy,66:$Vz}),o($VQ,[2,58],{60:$Vt,61:$Vu,65:$Vy}),o($VQ,[2,59],{60:$Vt,61:$Vu,65:$Vy}),o($VI,[2,60]),o($VQ,[2,61],{60:$Vt,61:$Vu,65:$Vy}),o($VR,[2,62],{58:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz}),o($VR,[2,63],{58:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz}),o($VR,[2,64],{58:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz}),o($VR,[2,65],{58:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz}),o($VS,[2,66],{58:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD}),o($VS,[2,67],{58:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD}),o([21,31,43,73],[2,68],{58:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,74:$VH}),o([21,31,43,73,74],[2,69],{58:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF}),o($VI,[2,77]),{30:[1,140]},{30:[1,141]},o($Vd,[2,25]),{20:142,23:$Vh,30:$Vi,48:$Vj,58:$Vk,59:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq},o($Vd,[2,30]),o($Vd,[2,31]),{28:[1,143]},o($VO,[2,34]),o($Vd,[2,33]),{4:145,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,23:$V0,24:$V1,28:$VT,29:144,33:$V2,34:$V3,36:$V4,38:$V5,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,55:$Vc},{43:[1,146],58:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH},o($Vd,[2,47]),{26:147,27:$Vf},{17:148,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va},o($Vd,[2,49]),o($VU,[2,51]),{20:149,23:$Vh,30:$Vi,48:$Vj,58:$Vk,59:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq},{20:150,23:$Vh,30:$Vi,48:$Vj,58:$Vk,59:$Vl,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq},{31:[1,151],58:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH},o($Vd,[2,32]),{28:[2,37]},o($VO,[2,21],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,6:29,23:$V0,24:$V1,33:$V2,34:$V3,36:$V4,38:$V5,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,55:$Vc}),o($VO,$VT,{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,4:145,29:152,23:$V0,24:$V1,33:$V2,34:$V3,36:$V4,38:$V5,45:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,55:$Vc}),o($Vd,[2,48]),{23:[1,153]},{31:[1,154],58:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH},{31:[1,155],58:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH},{26:156,27:$Vf},o($VO,[2,36]),o($VU,[2,50]),{21:[1,157]},{21:[1,158]},o($Vd,[2,26]),o($Vd,[2,45]),o($Vd,[2,46])],
defaultActions: {23:[2,39],24:[2,40],25:[2,41],26:[2,42],27:[2,43],28:[2,1],144:[2,37]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Primitive} = require('../Expresiones/Primitive');
    const {Aritmetica} = require('../Expresiones/Aritmetica');
    const {Relacional} = require('../Expresiones/Relacional');
    /*const {Continue} = require('../Expresiones/Continue');
    const {Break} = require('../Expresiones/Break');*/
    const {Logica} = require('../Expresiones/Logica');
    
    const {Identificador} = require('../Expresiones/Identificador');
    const {Imprimir} = require('../Instrucciones/Imprimir');
    const {If} = require('../Instrucciones/If');
    const {While} = require('../Instrucciones/While');
    const {DoWhile} = require('../Instrucciones/DoWhile');
    const {For} = require('../Instrucciones/For');
    const {Switch} = require('../Instrucciones/Switch');
    const {CaseSwitch} = require('../Instrucciones/CaseSwitch');
    const {DefaultSwitch} = require('../Instrucciones/DefaultSwitch');

    const {VoidMain} = require('../ClasesF/VoidMain');
    const {Metodo} = require('../ClasesF/Metodo');
    const {Parametros} = require('../ClasesF/Parametros');
    
    const {Declaracion} = require('../Instrucciones/Declaracion');
    const {Asignacion} = require('../Instrucciones/Asignacion');
    //const {Excepcion} = require('../utils/Exception');*/
    const {Tipo, types} = require('../Abstracto/Tipo');
    const {Tree} = require('../Simbols/Tree');

    let lis_Errores=require('../Errores/LisErrores');
    let NError=require('../Errores/NodeErr');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/*comen unilinea*/
break;
case 2:/*comen multilinea*/
break;
case 3:return 76 
break;
case 4:return 75 
break;
case 5:return 79
break;
case 6:return 48
break;
case 7:return 63
break;
case 8:return 64
break;
case 9:return 61
break;
case 10:return 58
break;
case 11:return 60
break;
case 12:return 62
break;
case 13:return 63
break;
case 14:return 65
break;
case 15:return 66
break;
case 16:return 67
break;
case 17:return 68
break;
case 18:return 70
break;
case 19:return 69
break;
case 20:return 71
break;
case 21:return 72
break;
case 22:return 73
break;
case 23:return 74
break;
case 24:return 59
break;
case 25:return 30
break;
case 26:return 31  
break;
case 27:return 27
break;
case 28:return 28  
break;
case 29:return 21
break;
case 30:return 22
break;
case 31:return 19
break;
case 32:return 45
break;
case 33:return 46
break;
case 34:return 47
break;
case 35:return 48
break;
case 36:return 49
break;
case 37:return 77
break;
case 38:return 78
break;
case 39:return 36
break;
case 40:return 37
break;
case 41:return 38
break;
case 42:return 42
break;
case 43:return 'break'
break;
case 44:return 44
break;
case 45:return 24
break;
case 46:return 33
break;
case 47:return 34
break;
case 48:return 'continue'
break;
case 49:return 50
break;
case 50:return 52
break;
case 51:return 53
break;
case 52:return 54
break;
case 53:return 51
break;
case 54:return 43
break;
case 55:return 55
break;
case 56:return 56
break;
case 57:return 23
break;
case 58:return 5
break;
case 59:lis_Errores.LisErrores.add(new NError.NodeErr("Lexico","Caracter invalido: "+yy_.yytext,yy_.yylloc.first_line, yy_.yylloc.first_column))
break;
}
},
rules: [/^(?:\s+)/i,/^(?:(\/\/.*\r\n)|(\/\/.*\n)|(\/\/.*\r))/i,/^(?:\/\*\/*([^*/]|[^*]\/|\*[^/])*\**\*\/)/i,/^(?:([0-9]+(\.[0-9]+)?))/i,/^(?:([0-9]+))/i,/^(?:(("[^"]*")))/i,/^(?:([\'][^\'\n][\']))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:,)/i,/^(?:=)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:String\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:continue\b)/i,/^(?:System\b)/i,/^(?:out\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:\.)/i,/^(?::)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}