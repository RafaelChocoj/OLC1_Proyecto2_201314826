/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,19],$V2=[1,20],$V3=[1,21],$V4=[1,22],$V5=[1,23],$V6=[1,25],$V7=[1,26],$V8=[1,27],$V9=[1,28],$Va=[1,29],$Vb=[1,18],$Vc=[1,24],$Vd=[5,25,26,30,35,36,38,40,44,46,47,48,49,50,51,52,57],$Ve=[1,34],$Vf=[1,35],$Vg=[1,38],$Vh=[1,40],$Vi=[21,23,24],$Vj=[2,19],$Vk=[1,59],$Vl=[1,61],$Vm=[1,58],$Vn=[1,51],$Vo=[1,52],$Vp=[1,53],$Vq=[1,54],$Vr=[1,55],$Vs=[1,56],$Vt=[1,57],$Vu=[5,25,26,30,32,35,36,38,40,44,46,47,48,49,50,51,52,57,61,62,78,79,80,81,82],$Vv=[1,89],$Vw=[1,86],$Vx=[1,87],$Vy=[1,88],$Vz=[1,90],$VA=[1,91],$VB=[1,92],$VC=[1,93],$VD=[1,94],$VE=[1,95],$VF=[1,96],$VG=[1,97],$VH=[1,98],$VI=[1,99],$VJ=[1,100],$VK=[1,101],$VL=[23,24,33,45,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],$VM=[5,23,24,25,26,30,33,35,36,38,40,44,45,46,47,48,49,50,51,52,57,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],$VN=[24,33],$VO=[5,25,26,30,35,36,38,39,40,44,46,47,48,49,50,51,52,57],$VP=[25,32,50,61,62,78,79,80,81,82],$VQ=[2,40],$VR=[1,119],$VS=[1,118],$VT=[1,125],$VU=[30,44,46],$VV=[23,24,33,45,61,65,70,71,72,73,74,75,76,77],$VW=[23,24,33,45,61,65,66,67,69,70,71,72,73,74,75,76,77],$VX=[23,24,33,45,70,71,72,73,74,75,76,77],$VY=[23,24,33,45,74,75,76,77],$VZ=[2,24];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LIS_INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ASIGNACION":8,"PRINT":9,"WHILE":10,"DOWHILE":11,"FOR":12,"IF":13,"SWITCH":14,"MAIN":15,"METODO":16,"FUNCION":17,"LLAMADA_FUN":18,"TIPO":19,"LISTA_ID":20,"=":21,"EX":22,";":23,",":24,"identificador":25,"while":26,"CONDICION":27,"BLOQUE_LISINSTRUCCIONES":28,"{":29,"}":30,"CASE_LISINSTRUCCIONES":31,"(":32,")":33,"CON_FOR":34,"do":35,"for":36,"INIFOR":37,"if":38,"else":39,"switch":40,"LIS_CASES":41,"C_DEFAULT":42,"CASE":43,"case":44,":":45,"default":46,"int":47,"double":48,"boolean":49,"char":50,"String":51,"System":52,".":53,"out":54,"print":55,"println":56,"void":57,"main":58,"LIS_PARAMETROS":59,"LIS_PARCALL":60,"-":61,"!":62,"++":63,"--":64,"+":65,"*":66,"/":67,"^":68,"mod":69,"<":70,">":71,">=":72,"<=":73,"==":74,"!=":75,"||":76,"&&":77,"entero":78,"decimal":79,"true":80,"false":81,"cadena":82,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",21:"=",23:";",24:",",25:"identificador",26:"while",29:"{",30:"}",32:"(",33:")",35:"do",36:"for",38:"if",39:"else",40:"switch",44:"case",45:":",46:"default",47:"int",48:"double",49:"boolean",50:"char",51:"String",52:"System",53:".",54:"out",55:"print",56:"println",57:"void",58:"main",61:"-",62:"!",63:"++",64:"--",65:"+",66:"*",67:"/",68:"^",69:"mod",70:"<",71:">",72:">=",73:"<=",74:"==",75:"!=",76:"||",77:"&&",78:"entero",79:"decimal",80:"true",81:"false",82:"cadena"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[7,3],[20,3],[20,1],[10,3],[28,3],[28,2],[31,1],[31,0],[27,3],[34,1],[11,5],[12,8],[37,1],[37,1],[13,3],[13,5],[13,5],[14,6],[14,5],[41,2],[41,1],[43,4],[42,3],[42,0],[19,1],[19,1],[19,1],[19,1],[19,1],[8,4],[9,9],[9,9],[15,5],[16,6],[16,5],[17,6],[17,5],[59,4],[59,2],[60,3],[60,1],[18,4],[18,3],[22,2],[22,2],[22,2],[22,2],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new Tree($$[$0-1]); return this.$;
break;
case 2: case 36:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: case 19: case 37:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 23: case 26: case 29: case 30:
this.$ = $$[$0];
break;
case 16:
this.$ = new Declaracion($$[$0-4], $$[$0-3], $$[$0-1], _$.first_line, _$.first_column);
break;
case 17:
this.$ = new Declaracion($$[$0-2], $$[$0-1], null, _$.first_line, _$.first_column);
break;
case 18:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 20:
this.$ = new While($$[$0-1], $$[$0], _$.first_line, _$.first_column);
break;
case 21: case 25:
this.$ = $$[$0-1];
break;
case 22:
this.$ = [];
break;
case 24: case 40:
this.$ = []; 
break;
case 27:
this.$ = new DoWhile($$[$0-1], $$[$0-3], _$.first_line, _$.first_column);
break;
case 28:
this.$ = new For($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$.first_line, _$.first_column);
break;
case 31:
this.$ = new If($$[$0-1], $$[$0], [], _$.first_line, _$.first_column);
break;
case 32:
this.$ = new If($$[$0-3], $$[$0-2], $$[$0], _$.first_line, _$.first_column);
break;
case 33:
this.$ = new If($$[$0-3], $$[$0-2], [$$[$0]], _$.first_line, _$.first_column);
break;
case 34:
 this.$ = new Switch($$[$0-4], $$[$0-2], $$[$0-1], _$.first_line, _$.first_column);  
break;
case 35:
 this.$ = new Switch($$[$0-3], [], $$[$0-1], _$.first_line, _$.first_column);  
break;
case 38:
 this.$ = new CaseSwitch($$[$0-2], $$[$0], _$.first_line, _$.first_column); 
break;
case 39:
 this.$ = [new DefaultSwitch( $$[$0], _$.first_line, _$.first_column)]; 
break;
case 41:
this.$ = new Tipo(types.int);
break;
case 42:
this.$ = new Tipo(types.double);
break;
case 43:
this.$ = new Tipo(types.boolean);
break;
case 44:
this.$ = new Tipo(types.char);
break;
case 45:
this.$ = new Tipo(types.String);
break;
case 46:
 this.$ = new Asignacion($$[$0-3], $$[$0-1], _$.first_line, _$.first_column); 
break;
case 47: case 48:
 this.$ = new Imprimir($$[$0-2], _$.first_line, _$.first_column);
break;
case 49:
 this.$ = new VoidMain( $$[$0], _$.first_line, _$.first_column); 
break;
case 50:
 this.$ = new Metodo($$[$0-4], $$[$0-2], $$[$0], _$.first_line, _$.first_column); 
break;
case 51:
 this.$ = new Metodo($$[$0-3], [], $$[$0], _$.first_line, _$.first_column); 
break;
case 52:
 this.$ = new Funcion($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$.first_line, _$.first_column); 
break;
case 53:
 this.$ = new Funcion($$[$0-4], $$[$0-3], [], $$[$0], _$.first_line, _$.first_column); 
break;
case 54:
 this.$ = $$[$0-3]; this.$.push(new Parametros( $$[$0-1], $$[$0], _$.first_line, _$.first_column)); 
break;
case 55:
 this.$ = [new Parametros( $$[$0-1], $$[$0], _$.first_line, _$.first_column)]; 
break;
case 56:
 this.$ = $$[$0-2]; this.$.push(new ParametroCall( $$[$0], _$.first_line, _$.first_column)); 
break;
case 57:
 this.$ = [new ParametroCall( $$[$0], _$.first_line, _$.first_column)]; 
break;
case 58:
 this.$ = new LlamadaF($$[$0-3], $$[$0-1],  _$.first_line, _$.first_column); 
break;
case 59:
 this.$ = new LlamadaF($$[$0-2], [],  _$.first_line, _$.first_column); 
break;
case 60:
 this.$ = new Aritmetica($$[$0], null, '-', _$.first_line, _$.first_column); 
break;
case 61:
 
break;
case 62:
 this.$ = new Aritmetica($$[$0-1], null, '++', _$.first_line, _$.first_column); 
break;
case 63:
 this.$ = new Aritmetica($$[$0-1], null, '--', _$.first_line, _$.first_column); 
break;
case 64:
 this.$ = new Aritmetica($$[$0-2], $$[$0], '+', _$.first_line, _$.first_column); 
break;
case 65:
 this.$ = new Aritmetica($$[$0-2], $$[$0], '-', _$.first_line, _$.first_column); 
break;
case 66:
 this.$ = new Aritmetica($$[$0-2], $$[$0], '*', _$.first_line, _$.first_column); 
break;
case 67:
 this.$ = new Aritmetica($$[$0-2], $$[$0], '/', _$.first_line, _$.first_column); 
break;
case 68:
 this.$ = new Aritmetica($$[$0-2], $$[$0], '^', _$.first_line, _$.first_column); 
break;
case 69:
 this.$ = new Aritmetica($$[$0-2], $$[$0], '%', _$.first_line, _$.first_column); 
break;
case 70:
 this.$ = new Relacional($$[$0-2], $$[$0], '<', _$.first_line, _$.first_column); 
break;
case 71:
 this.$ = new Relacional($$[$0-2], $$[$0], '>', _$.first_line, _$.first_column); 
break;
case 72:
 this.$ = new Relacional($$[$0-2], $$[$0], '>=', _$.first_line, _$.first_column);
break;
case 73:
 this.$ = new Relacional($$[$0-2], $$[$0], '<=', _$.first_line, _$.first_column); 
break;
case 74:
 this.$ = new Relacional($$[$0-2], $$[$0], '==', _$.first_line, _$.first_column);
break;
case 75:
 this.$ = new Relacional($$[$0-2], $$[$0], '!=', _$.first_line, _$.first_column); 
break;
case 76:
 this.$ = new Logica($$[$0-2], $$[$0], '&&', _$.first_line, _$.first_column); 
break;
case 77:
 this.$ = new Logica($$[$0-2], $$[$0], '||', _$.first_line, _$.first_column); 
break;
case 78:
 this.$ = new Primitive(new Tipo(types.int), Number($$[$0]), _$.first_line, _$.first_column);
break;
case 79:
 this.$ = new Primitive(new Tipo(types.decimal), Number($$[$0]), _$.first_line, _$.first_column); 
break;
case 80: case 81:
 this.$ = new Primitive(new Tipo(types.boolean), Boolean($$[$0]), _$.first_line, _$.first_column);
break;
case 82:
 this.$ = new Primitive(new Tipo(types.String), String($$[$0]), _$.first_line, _$.first_column);
break;
case 83:
 this.$ = new Primitive(new Tipo(types.char), String($$[$0]), _$.first_line, _$.first_column);
break;
case 84:
 this.$ = new Identificador($$[$0], _$.first_line, _$.first_column); 
break;
case 85:
 this.$ =$$[$0]; 
break;
case 86:
 this.$ = $$[$0-1]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,25:$V0,26:$V1,35:$V2,36:$V3,38:$V4,40:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,57:$Vc},{1:[3]},{5:[1,30],6:31,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,25:$V0,26:$V1,35:$V2,36:$V3,38:$V4,40:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,57:$Vc},o($Vd,[2,3]),o($Vd,[2,4]),o($Vd,[2,5]),o($Vd,[2,6]),o($Vd,[2,7]),o($Vd,[2,8]),o($Vd,[2,9]),o($Vd,[2,10]),o($Vd,[2,11]),o($Vd,[2,12]),o($Vd,[2,13]),o($Vd,[2,14]),o($Vd,[2,15]),{20:32,25:[1,33]},{21:$Ve,32:$Vf},{53:[1,36]},{27:37,32:$Vg},{28:39,29:$Vh},{32:[1,41]},{27:42,32:$Vg},{27:43,32:$Vg},{25:[1,45],58:[1,44]},{25:[2,41]},{25:[2,42]},{25:[2,43]},{25:[2,44]},{25:[2,45]},{1:[2,1]},o($Vd,[2,2]),{21:[1,46],23:[1,47],24:[1,48]},o($Vi,$Vj,{32:[1,49]}),{18:60,22:50,25:$Vk,32:$Vl,50:$Vm,61:$Vn,62:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{18:60,22:64,25:$Vk,32:$Vl,33:[1,63],50:$Vm,60:62,61:$Vn,62:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{54:[1,65]},{28:66,29:$Vh},{18:60,22:67,25:$Vk,32:$Vl,50:$Vm,61:$Vn,62:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{26:[1,68]},{4:69,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,25:$V0,26:$V1,30:[1,70],35:$V2,36:$V3,38:$V4,40:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,57:$Vc},{7:72,8:73,19:74,25:[1,75],37:71,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va},{28:76,29:$Vh},{29:[1,77]},{32:[1,78]},{32:[1,79]},{18:60,22:80,25:$Vk,32:$Vl,50:$Vm,61:$Vn,62:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},o($Vu,[2,17]),{25:[1,81]},{19:84,33:[1,83],47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,59:82},{23:[1,85],61:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK},{18:60,22:102,25:$Vk,32:$Vl,50:$Vm,61:$Vn,62:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{18:60,22:103,25:$Vk,32:$Vl,50:$Vm,61:$Vn,62:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},o($VL,[2,78]),o($VL,[2,79]),o($VL,[2,80]),o($VL,[2,81]),o($VL,[2,82]),o($VL,[2,83]),o($VL,[2,84],{32:$Vf}),o($VL,[2,85]),{18:60,22:104,25:$Vk,32:$Vl,50:$Vm,61:$Vn,62:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{24:[1,106],33:[1,105]},o($VM,[2,59]),o($VN,[2,57],{61:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK}),{53:[1,107]},o($Vd,[2,20]),{33:[1,108],61:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK},{27:109,32:$Vg},{6:31,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,25:$V0,26:$V1,30:[1,110],35:$V2,36:$V3,38:$V4,40:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,57:$Vc},o($VO,[2,22]),{18:60,22:112,25:$Vk,32:$Vl,34:111,50:$Vm,61:$Vn,62:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},o($VP,[2,29]),o($VP,[2,30]),{20:32,25:[1,113]},{21:$Ve},o($Vd,[2,31],{39:[1,114]}),{30:$VQ,41:115,42:116,43:117,44:$VR,46:$VS},{33:[1,120]},{19:84,33:[1,122],47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,59:121},{23:[1,123],61:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK},o($Vi,[2,18]),{24:$VT,33:[1,124]},{28:126,29:$Vh},{25:[1,127]},o($Vu,[2,46]),o($VL,[2,62]),o($VL,[2,63]),{18:60,22:128,25:$Vk,32:$Vl,50:$Vm,61:$Vn,62:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{18:60,22:129,25:$Vk,32:$Vl,50:$Vm,61:$Vn,62:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{18:60,22:130,25:$Vk,32:$Vl,50:$Vm,61:$Vn,62:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{18:60,22:131,25:$Vk,32:$Vl,50:$Vm,61:$Vn,62:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{18:60,22:132,25:$Vk,32:$Vl,50:$Vm,61:$Vn,62:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{18:60,22:133,25:$Vk,32:$Vl,50:$Vm,61:$Vn,62:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{18:60,22:134,25:$Vk,32:$Vl,50:$Vm,61:$Vn,62:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{18:60,22:135,25:$Vk,32:$Vl,50:$Vm,61:$Vn,62:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{18:60,22:136,25:$Vk,32:$Vl,50:$Vm,61:$Vn,62:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{18:60,22:137,25:$Vk,32:$Vl,50:$Vm,61:$Vn,62:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{18:60,22:138,25:$Vk,32:$Vl,50:$Vm,61:$Vn,62:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{18:60,22:139,25:$Vk,32:$Vl,50:$Vm,61:$Vn,62:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{18:60,22:140,25:$Vk,32:$Vl,50:$Vm,61:$Vn,62:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{18:60,22:141,25:$Vk,32:$Vl,50:$Vm,61:$Vn,62:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},o($VL,[2,60]),o([23,24,33,45,61,63,64,65,66,67,69,70,71,72,73,74,75,76,77],[2,61],{68:$VB}),{33:[1,142],61:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK},o($VM,[2,58]),{18:60,22:143,25:$Vk,32:$Vl,50:$Vm,61:$Vn,62:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{55:[1,144],56:[1,145]},o([23,29],[2,25]),{23:[1,146]},o($VO,[2,21]),{23:[1,147]},{23:[2,26],61:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK},o($Vi,$Vj),{13:149,28:148,29:$Vh,38:$V4},{30:$VQ,42:150,43:151,44:$VR,46:$VS},{30:[1,152]},o($VU,[2,37]),{45:[1,153]},{18:60,22:154,25:$Vk,32:$Vl,50:$Vm,61:$Vn,62:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{28:155,29:$Vh},{24:$VT,33:[1,156]},{28:157,29:$Vh},o($Vu,[2,16]),{28:158,29:$Vh},{19:159,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va},o($Vd,[2,53]),o($VN,[2,55]),o($VV,[2,64],{63:$Vw,64:$Vx,66:$Vz,67:$VA,68:$VB,69:$VC}),o($VV,[2,65],{63:$Vw,64:$Vx,66:$Vz,67:$VA,68:$VB,69:$VC}),o($VW,[2,66],{63:$Vw,64:$Vx,68:$VB}),o($VW,[2,67],{63:$Vw,64:$Vx,68:$VB}),o($VL,[2,68]),o($VW,[2,69],{63:$Vw,64:$Vx,68:$VB}),o($VX,[2,70],{61:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC}),o($VX,[2,71],{61:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC}),o($VX,[2,72],{61:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC}),o($VX,[2,73],{61:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC}),o($VY,[2,74],{61:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG}),o($VY,[2,75],{61:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG}),o([23,24,33,45,76],[2,76],{61:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,77:$VK}),o([23,24,33,45,76,77],[2,77],{61:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI}),o($VL,[2,86]),o($VN,[2,56],{61:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK}),{32:[1,160]},{32:[1,161]},o($Vd,[2,27]),{18:60,22:162,25:$Vk,32:$Vl,50:$Vm,61:$Vn,62:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},o($Vd,[2,32]),o($Vd,[2,33]),{30:[1,163]},o($VU,[2,36]),o($Vd,[2,35]),{4:165,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,25:$V0,26:$V1,30:$VZ,31:164,35:$V2,36:$V3,38:$V4,40:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,57:$Vc},{45:[1,166],61:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK},o($Vd,[2,49]),{28:167,29:$Vh},o($Vd,[2,51]),o($Vd,[2,52]),{25:[1,168]},{18:60,22:169,25:$Vk,32:$Vl,50:$Vm,61:$Vn,62:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{18:60,22:170,25:$Vk,32:$Vl,50:$Vm,61:$Vn,62:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{33:[1,171],61:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK},o($Vd,[2,34]),{30:[2,39]},o($VU,[2,23],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,6:31,25:$V0,26:$V1,35:$V2,36:$V3,38:$V4,40:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,57:$Vc}),o($VU,$VZ,{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,4:165,31:172,25:$V0,26:$V1,35:$V2,36:$V3,38:$V4,40:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,52:$Vb,57:$Vc}),o($Vd,[2,50]),o($VN,[2,54]),{33:[1,173],61:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK},{33:[1,174],61:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK},{28:175,29:$Vh},o($VU,[2,38]),{23:[1,176]},{23:[1,177]},o($Vd,[2,28]),o($Vd,[2,47]),o($Vd,[2,48])],
defaultActions: {25:[2,41],26:[2,42],27:[2,43],28:[2,44],29:[2,45],30:[2,1],164:[2,39]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Primitive} = require('../Expresiones/Primitive');
    const {Aritmetica} = require('../Expresiones/Aritmetica');
    const {Relacional} = require('../Expresiones/Relacional');
    /*const {Continue} = require('../Expresiones/Continue');
    const {Break} = require('../Expresiones/Break');*/
    const {Logica} = require('../Expresiones/Logica');
    
    const {Identificador} = require('../Expresiones/Identificador');
    const {Imprimir} = require('../Instrucciones/Imprimir');
    const {If} = require('../Instrucciones/If');
    const {While} = require('../Instrucciones/While');
    const {DoWhile} = require('../Instrucciones/DoWhile');
    const {For} = require('../Instrucciones/For');
    const {Switch} = require('../Instrucciones/Switch');
    const {CaseSwitch} = require('../Instrucciones/CaseSwitch');
    const {DefaultSwitch} = require('../Instrucciones/DefaultSwitch');

    const {VoidMain} = require('../ClasesF/VoidMain');
    const {Metodo} = require('../ClasesF/Metodo');
    const {Parametros} = require('../ClasesF/Parametros');
    const {Funcion} = require('../ClasesF/Funcion');
    const {ParametroCall} = require('../ClasesF/ParametroCall');
    const {LlamadaF} = require('../ClasesF/LlamadaF');
    
    const {Declaracion} = require('../Instrucciones/Declaracion');
    const {Asignacion} = require('../Instrucciones/Asignacion');
    //const {Excepcion} = require('../utils/Exception');*/
    const {Tipo, types} = require('../Abstracto/Tipo');
    const {Tree} = require('../Simbols/Tree');

    let lis_Errores=require('../Errores/LisErrores');
    let NError=require('../Errores/NodeErr');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/*comen unilinea*/
break;
case 2:/*comen multilinea*/
break;
case 3:return 79 
break;
case 4:return 78 
break;
case 5:return 82
break;
case 6:return 50
break;
case 7:return 66
break;
case 8:return 67
break;
case 9:return 64
break;
case 10:return 61
break;
case 11:return 63
break;
case 12:return 65
break;
case 13:return 66
break;
case 14:return 68
break;
case 15:return 69
break;
case 16:return 70
break;
case 17:return 71
break;
case 18:return 73
break;
case 19:return 72
break;
case 20:return 74
break;
case 21:return 75
break;
case 22:return 76
break;
case 23:return 77
break;
case 24:return 62
break;
case 25:return 32
break;
case 26:return 33  
break;
case 27:return 29
break;
case 28:return 30  
break;
case 29:return 23
break;
case 30:return 24
break;
case 31:return 21
break;
case 32:return 47
break;
case 33:return 48
break;
case 34:return 49
break;
case 35:return 50
break;
case 36:return 51
break;
case 37:return 80
break;
case 38:return 81
break;
case 39:return 38
break;
case 40:return 39
break;
case 41:return 40
break;
case 42:return 44
break;
case 43:return 'break'
break;
case 44:return 46
break;
case 45:return 26
break;
case 46:return 35
break;
case 47:return 36
break;
case 48:return 'continue'
break;
case 49:return 52
break;
case 50:return 54
break;
case 51:return 55
break;
case 52:return 56
break;
case 53:return 53
break;
case 54:return 45
break;
case 55:return 57
break;
case 56:return 58
break;
case 57:return 25
break;
case 58:return 5
break;
case 59:lis_Errores.LisErrores.add(new NError.NodeErr("Lexico","Caracter invalido: "+yy_.yytext,yy_.yylloc.first_line, yy_.yylloc.first_column))
break;
}
},
rules: [/^(?:\s+)/i,/^(?:(\/\/.*\r\n)|(\/\/.*\n)|(\/\/.*\r))/i,/^(?:\/\*\/*([^*/]|[^*]\/|\*[^/])*\**\*\/)/i,/^(?:([0-9]+(\.[0-9]+)?))/i,/^(?:([0-9]+))/i,/^(?:(("[^"]*")))/i,/^(?:([\'][^\'\n][\']))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:,)/i,/^(?:=)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:String\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:continue\b)/i,/^(?:System\b)/i,/^(?:out\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:\.)/i,/^(?::)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}