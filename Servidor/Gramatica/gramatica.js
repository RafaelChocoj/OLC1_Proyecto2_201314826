/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,26],$V1=[1,28],$V2=[1,29],$V3=[1,30],$V4=[1,31],$V5=[1,32],$V6=[1,27],$V7=[8,13],$V8=[9,12,57,58,59,60,61,67],$V9=[1,38],$Va=[14,36,37],$Vb=[2,32],$Vc=[1,55],$Vd=[1,57],$Ve=[1,54],$Vf=[1,47],$Vg=[1,48],$Vh=[1,49],$Vi=[1,50],$Vj=[1,51],$Vk=[1,52],$Vl=[1,53],$Vm=[9,12,30,31,32,38,42,45,46,48,50,54,56,57,58,59,60,61,62,67,72,73,89,90,91,92,93],$Vn=[1,69],$Vo=[1,66],$Vp=[1,67],$Vq=[1,68],$Vr=[1,70],$Vs=[1,71],$Vt=[1,72],$Vu=[1,73],$Vv=[1,74],$Vw=[1,75],$Vx=[1,76],$Vy=[1,77],$Vz=[1,78],$VA=[1,79],$VB=[1,80],$VC=[1,81],$VD=[14,37,43,55,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],$VE=[1,91],$VF=[1,93],$VG=[1,134],$VH=[1,130],$VI=[1,131],$VJ=[1,132],$VK=[1,136],$VL=[1,137],$VM=[1,138],$VN=[1,139],$VO=[1,140],$VP=[1,135],$VQ=[37,43],$VR=[14,37,43,55,72,76,81,82,83,84,85,86,87,88],$VS=[14,37,43,55,72,76,77,78,80,81,82,83,84,85,86,87,88],$VT=[14,37,43,55,81,82,83,84,85,86,87,88],$VU=[14,37,43,55,85,86,87,88],$VV=[1,142],$VW=[9,12,30,31,32,38,45,46,48,49,50,54,56,57,58,59,60,61,62,67],$VX=[9,12,30,31,32,38,45,46,48,50,54,56,57,58,59,60,61,62],$VY=[1,155],$VZ=[9,42,60,72,73,89,90,91,92,93],$V_=[2,53],$V$=[1,185],$V01=[1,184],$V11=[12,54,56],$V21=[2,37];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"IN_CLASE":4,"EOF":5,"CLASE":6,"IMPORTS":7,"class":8,"identificador":9,"{":10,"LIS_INSTRU_CLASS":11,"}":12,"import":13,";":14,"INSTRU_CLASS":15,"DECLARACION":16,"ASIGNACION":17,"MAIN":18,"METODO":19,"FUNCION":20,"LIS_INSTRUCCIONES":21,"INSTRUCCION":22,"PRINT":23,"WHILE":24,"DOWHILE":25,"FOR":26,"IF":27,"SWITCH":28,"LLAMADA_FUN_ALONE":29,"continue":30,"break":31,"return":32,"EX":33,"TIPO":34,"LISTA_ID":35,"=":36,",":37,"while":38,"CONDICION":39,"BLOQUE_LISINSTRUCCIONES":40,"CASE_LISINSTRUCCIONES":41,"(":42,")":43,"CON_FOR":44,"do":45,"for":46,"INIFOR":47,"if":48,"else":49,"switch":50,"LIS_CASES":51,"C_DEFAULT":52,"CASE":53,"case":54,":":55,"default":56,"int":57,"double":58,"boolean":59,"char":60,"String":61,"System":62,".":63,"out":64,"print":65,"println":66,"void":67,"main":68,"LIS_PARAMETROS":69,"LIS_PARCALL":70,"LLAMADA_FUN":71,"-":72,"!":73,"++":74,"--":75,"+":76,"*":77,"/":78,"^":79,"mod":80,"<":81,">":82,">=":83,"<=":84,"==":85,"!=":86,"||":87,"&&":88,"entero":89,"decimal":90,"true":91,"false":92,"cadena":93,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"class",9:"identificador",10:"{",12:"}",13:"import",14:";",30:"continue",31:"break",32:"return",36:"=",37:",",38:"while",42:"(",43:")",45:"do",46:"for",48:"if",49:"else",50:"switch",54:"case",55:":",56:"default",57:"int",58:"double",59:"boolean",60:"char",61:"String",62:"System",63:".",64:"out",65:"print",66:"println",67:"void",68:"main",72:"-",73:"!",74:"++",75:"--",76:"+",77:"*",78:"/",79:"^",80:"mod",81:"<",82:">",83:">=",84:"<=",85:"==",86:"!=",87:"||",88:"&&",89:"entero",90:"decimal",91:"true",92:"false",93:"cadena"},
productions_: [0,[3,2],[4,1],[6,6],[6,5],[7,4],[7,3],[11,2],[11,1],[15,1],[15,1],[15,1],[15,1],[15,1],[21,2],[21,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,2],[22,2],[22,2],[22,3],[16,5],[16,3],[35,3],[35,1],[24,3],[40,3],[40,2],[41,1],[41,0],[39,3],[44,1],[25,5],[26,8],[47,1],[47,1],[27,3],[27,5],[27,5],[28,6],[28,5],[51,2],[51,1],[53,4],[52,3],[52,0],[34,1],[34,1],[34,1],[34,1],[34,1],[17,4],[23,9],[23,9],[18,5],[19,6],[19,5],[20,6],[20,5],[69,4],[69,2],[70,3],[70,1],[71,4],[71,3],[29,5],[29,4],[33,2],[33,2],[33,2],[33,2],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new Tree($$[$0-1]); return this.$;
break;
case 2: case 8: case 15: case 32: case 50:
 this.$ = [$$[$0]]; 
break;
case 3:
 this.$ = new Clase($$[$0-5], $$[$0-3], $$[$0-1], _$.first_line, _$.first_column); 
break;
case 4:
 this.$ = new Clase([], $$[$0-3], $$[$0-1], _$.first_line, _$.first_column); 
break;
case 5:
 this.$ = $$[$0-3]; this.$.push($$[$0-1]); 
break;
case 6:
 this.$ = [$$[$0-1]]; 
break;
case 7: case 14: case 49:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 9: case 10: case 11: case 12: case 13: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 36: case 39: case 42: case 43:
this.$ = $$[$0];
break;
case 25:
this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 26:
this.$ = new Break( _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 27:
this.$ = new ReturnM(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 28:
this.$ = new ReturnF($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 29:
this.$ = new Declaracion($$[$0-4], $$[$0-3], $$[$0-1], _$.first_line, _$.first_column);
break;
case 30:
this.$ = new Declaracion($$[$0-2], $$[$0-1], null, _$.first_line, _$.first_column);
break;
case 31:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 33:
this.$ = new While($$[$0-1], $$[$0], _$.first_line, _$.first_column);
break;
case 34: case 38:
this.$ = $$[$0-1];
break;
case 35:
this.$ = [];
break;
case 37: case 53:
this.$ = []; 
break;
case 40:
this.$ = new DoWhile($$[$0-1], $$[$0-3], _$.first_line, _$.first_column);
break;
case 41:
this.$ = new For($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$.first_line, _$.first_column);
break;
case 44:
this.$ = new If($$[$0-1], $$[$0], [], _$.first_line, _$.first_column);
break;
case 45:
this.$ = new If($$[$0-3], $$[$0-2], $$[$0], _$.first_line, _$.first_column);
break;
case 46:
this.$ = new If($$[$0-3], $$[$0-2], [$$[$0]], _$.first_line, _$.first_column);
break;
case 47:
 this.$ = new Switch($$[$0-4], $$[$0-2], $$[$0-1], _$.first_line, _$.first_column);  
break;
case 48:
 this.$ = new Switch($$[$0-3], [], $$[$0-1], _$.first_line, _$.first_column);  
break;
case 51:
 this.$ = new CaseSwitch($$[$0-2], $$[$0], _$.first_line, _$.first_column); 
break;
case 52:
 this.$ = [new DefaultSwitch( $$[$0], _$.first_line, _$.first_column)]; 
break;
case 54:
this.$ = new Tipo(types.int);
break;
case 55:
this.$ = new Tipo(types.double);
break;
case 56:
this.$ = new Tipo(types.boolean);
break;
case 57:
this.$ = new Tipo(types.char);
break;
case 58:
this.$ = new Tipo(types.String);
break;
case 59:
 this.$ = new Asignacion($$[$0-3], $$[$0-1], _$.first_line, _$.first_column); 
break;
case 60: case 61:
 this.$ = new Imprimir($$[$0-2], _$.first_line, _$.first_column);
break;
case 62:
 this.$ = new VoidMain( $$[$0], _$.first_line, _$.first_column); 
break;
case 63:
 this.$ = new Metodo($$[$0-4], $$[$0-2], $$[$0], _$.first_line, _$.first_column); 
break;
case 64:
 this.$ = new Metodo($$[$0-3], [], $$[$0], _$.first_line, _$.first_column); 
break;
case 65:
 this.$ = new Funcion($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$.first_line, _$.first_column); 
break;
case 66:
 this.$ = new Funcion($$[$0-4], $$[$0-3], [], $$[$0], _$.first_line, _$.first_column); 
break;
case 67:
 this.$ = $$[$0-3]; this.$.push(new Parametros( $$[$0-1], $$[$0], _$.first_line, _$.first_column)); 
break;
case 68:
 this.$ = [new Parametros( $$[$0-1], $$[$0], _$.first_line, _$.first_column)]; 
break;
case 69:
 this.$ = $$[$0-2]; this.$.push(new ParametroCall( $$[$0], _$.first_line, _$.first_column)); 
break;
case 70:
 this.$ = [new ParametroCall( $$[$0], _$.first_line, _$.first_column)]; 
break;
case 71:
 this.$ = new LlamadaF($$[$0-3], $$[$0-1],  _$.first_line, _$.first_column); 
break;
case 72:
 this.$ = new LlamadaF($$[$0-2], [],  _$.first_line, _$.first_column); 
break;
case 73:
 this.$ = new LlamadaF($$[$0-4], $$[$0-2],  _$.first_line, _$.first_column); 
break;
case 74:
 this.$ = new LlamadaF($$[$0-3], [],  _$.first_line, _$.first_column); 
break;
case 75:
 this.$ = new Aritmetica($$[$0], null, '-', _$.first_line, _$.first_column); 
break;
case 76:
 this.$ = new LogicaNot($$[$0], '!', _$.first_line, _$.first_column); 
break;
case 77:
 this.$ = new Aritmetica($$[$0-1], null, '++', _$.first_line, _$.first_column); 
break;
case 78:
 this.$ = new Aritmetica($$[$0-1], null, '--', _$.first_line, _$.first_column); 
break;
case 79:
 this.$ = new Aritmetica($$[$0-2], $$[$0], '+', _$.first_line, _$.first_column); 
break;
case 80:
 this.$ = new Aritmetica($$[$0-2], $$[$0], '-', _$.first_line, _$.first_column); 
break;
case 81:
 this.$ = new Aritmetica($$[$0-2], $$[$0], '*', _$.first_line, _$.first_column); 
break;
case 82:
 this.$ = new Aritmetica($$[$0-2], $$[$0], '/', _$.first_line, _$.first_column); 
break;
case 83:
 this.$ = new Aritmetica($$[$0-2], $$[$0], '^', _$.first_line, _$.first_column); 
break;
case 84:
 this.$ = new Aritmetica($$[$0-2], $$[$0], '%', _$.first_line, _$.first_column); 
break;
case 85:
 this.$ = new Relacional($$[$0-2], $$[$0], '<', _$.first_line, _$.first_column); 
break;
case 86:
 this.$ = new Relacional($$[$0-2], $$[$0], '>', _$.first_line, _$.first_column); 
break;
case 87:
 this.$ = new Relacional($$[$0-2], $$[$0], '>=', _$.first_line, _$.first_column);
break;
case 88:
 this.$ = new Relacional($$[$0-2], $$[$0], '<=', _$.first_line, _$.first_column); 
break;
case 89:
 this.$ = new Relacional($$[$0-2], $$[$0], '==', _$.first_line, _$.first_column);
break;
case 90:
 this.$ = new Relacional($$[$0-2], $$[$0], '!=', _$.first_line, _$.first_column); 
break;
case 91:
 this.$ = new Logica($$[$0-2], $$[$0], '&&', _$.first_line, _$.first_column); 
break;
case 92:
 this.$ = new Logica($$[$0-2], $$[$0], '||', _$.first_line, _$.first_column); 
break;
case 93:
 this.$ = new Primitive(new Tipo(types.int), Number($$[$0]), _$.first_line, _$.first_column);
break;
case 94:
 this.$ = new Primitive(new Tipo(types.decimal), Number($$[$0]), _$.first_line, _$.first_column); 
break;
case 95: case 96:
 this.$ = new Primitive(new Tipo(types.boolean), Boolean($$[$0]), _$.first_line, _$.first_column);
break;
case 97:
 this.$ = new Primitive(new Tipo(types.String), String($$[$0]), _$.first_line, _$.first_column);
break;
case 98:
 this.$ = new Primitive(new Tipo(types.char), String($$[$0]), _$.first_line, _$.first_column);
break;
case 99:
 this.$ = new Identificador($$[$0], _$.first_line, _$.first_column); 
break;
case 100:
 this.$ =$$[$0]; 
break;
case 101:
 this.$ = $$[$0-1]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:[1,5],13:[1,6]},{1:[3]},{5:[1,7]},{5:[2,2]},{8:[1,8],13:[1,9]},{9:[1,10]},{9:[1,11]},{1:[2,1]},{9:[1,12]},{9:[1,13]},{10:[1,14]},{14:[1,15]},{10:[1,16]},{14:[1,17]},{9:$V0,11:18,15:19,16:20,17:21,18:22,19:23,20:24,34:25,57:$V1,58:$V2,59:$V3,60:$V4,61:$V5,67:$V6},o($V7,[2,6]),{9:$V0,11:33,15:19,16:20,17:21,18:22,19:23,20:24,34:25,57:$V1,58:$V2,59:$V3,60:$V4,61:$V5,67:$V6},o($V7,[2,5]),{9:$V0,12:[1,34],15:35,16:20,17:21,18:22,19:23,20:24,34:25,57:$V1,58:$V2,59:$V3,60:$V4,61:$V5,67:$V6},o($V8,[2,8]),o($V8,[2,9]),o($V8,[2,10]),o($V8,[2,11]),o($V8,[2,12]),o($V8,[2,13]),{9:[1,37],35:36},{36:$V9},{9:[1,40],68:[1,39]},{9:[2,54]},{9:[2,55]},{9:[2,56]},{9:[2,57]},{9:[2,58]},{9:$V0,12:[1,41],15:35,16:20,17:21,18:22,19:23,20:24,34:25,57:$V1,58:$V2,59:$V3,60:$V4,61:$V5,67:$V6},{5:[2,4]},o($V8,[2,7]),{14:[1,43],36:[1,42],37:[1,44]},o($Va,$Vb,{42:[1,45]}),{9:$Vc,33:46,42:$Vd,60:$Ve,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{42:[1,58]},{42:[1,59]},{5:[2,3]},{9:$Vc,33:60,42:$Vd,60:$Ve,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},o($Vm,[2,30]),{9:[1,61]},{34:64,43:[1,63],57:$V1,58:$V2,59:$V3,60:$V4,61:$V5,69:62},{14:[1,65],72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC},{9:$Vc,33:82,42:$Vd,60:$Ve,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,33:83,42:$Vd,60:$Ve,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},o($VD,[2,93]),o($VD,[2,94]),o($VD,[2,95]),o($VD,[2,96]),o($VD,[2,97]),o($VD,[2,98]),o($VD,[2,99],{42:[1,84]}),o($VD,[2,100]),{9:$Vc,33:85,42:$Vd,60:$Ve,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{43:[1,86]},{34:64,43:[1,88],57:$V1,58:$V2,59:$V3,60:$V4,61:$V5,69:87},{14:[1,89],72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC},o($Va,[2,31]),{37:$VE,43:[1,90]},{10:$VF,40:92},{9:[1,94]},o($Vm,[2,59]),o($VD,[2,77]),o($VD,[2,78]),{9:$Vc,33:95,42:$Vd,60:$Ve,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,33:96,42:$Vd,60:$Ve,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,33:97,42:$Vd,60:$Ve,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,33:98,42:$Vd,60:$Ve,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,33:99,42:$Vd,60:$Ve,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,33:100,42:$Vd,60:$Ve,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,33:101,42:$Vd,60:$Ve,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,33:102,42:$Vd,60:$Ve,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,33:103,42:$Vd,60:$Ve,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,33:104,42:$Vd,60:$Ve,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,33:105,42:$Vd,60:$Ve,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,33:106,42:$Vd,60:$Ve,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,33:107,42:$Vd,60:$Ve,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,33:108,42:$Vd,60:$Ve,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},o($VD,[2,75]),o([14,37,43,55,72,74,75,76,77,78,80,81,82,83,84,85,86,87,88],[2,76],{79:$Vt}),{9:$Vc,33:111,42:$Vd,43:[1,110],60:$Ve,70:109,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{43:[1,112],72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC},{10:$VF,40:113},{37:$VE,43:[1,114]},{10:$VF,40:115},o($Vm,[2,29]),{10:$VF,40:116},{34:117,57:$V1,58:$V2,59:$V3,60:$V4,61:$V5},o($V8,[2,66]),{9:$VG,12:[1,119],16:121,17:122,21:118,22:120,23:123,24:124,25:125,26:126,27:127,28:128,29:129,30:$VH,31:$VI,32:$VJ,34:133,38:$VK,45:$VL,46:$VM,48:$VN,50:$VO,57:$V1,58:$V2,59:$V3,60:$V4,61:$V5,62:$VP},o($VQ,[2,68]),o($VR,[2,79],{74:$Vo,75:$Vp,77:$Vr,78:$Vs,79:$Vt,80:$Vu}),o($VR,[2,80],{74:$Vo,75:$Vp,77:$Vr,78:$Vs,79:$Vt,80:$Vu}),o($VS,[2,81],{74:$Vo,75:$Vp,79:$Vt}),o($VS,[2,82],{74:$Vo,75:$Vp,79:$Vt}),o($VD,[2,83]),o($VS,[2,84],{74:$Vo,75:$Vp,79:$Vt}),o($VT,[2,85],{72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu}),o($VT,[2,86],{72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu}),o($VT,[2,87],{72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu}),o($VT,[2,88],{72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu}),o($VU,[2,89],{72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy}),o($VU,[2,90],{72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy}),o([14,37,43,55,87],[2,91],{72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,88:$VC}),o([14,37,43,55,87,88],[2,92],{72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA}),{37:$VV,43:[1,141]},o($VD,[2,72]),o($VQ,[2,70],{72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC}),o($VD,[2,101]),o($V8,[2,62]),{10:$VF,40:143},o($V8,[2,64]),o($V8,[2,65]),{9:[1,144]},{9:$VG,12:[1,145],16:121,17:122,22:146,23:123,24:124,25:125,26:126,27:127,28:128,29:129,30:$VH,31:$VI,32:$VJ,34:133,38:$VK,45:$VL,46:$VM,48:$VN,50:$VO,57:$V1,58:$V2,59:$V3,60:$V4,61:$V5,62:$VP},o($VW,[2,35]),o($VX,[2,15]),o($VX,[2,16]),o($VX,[2,17]),o($VX,[2,18]),o($VX,[2,19]),o($VX,[2,20]),o($VX,[2,21]),o($VX,[2,22]),o($VX,[2,23]),o($VX,[2,24]),{14:[1,147]},{14:[1,148]},{9:$Vc,14:[1,149],33:150,42:$Vd,60:$Ve,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:[1,151],35:36},{36:$V9,42:[1,152]},{63:[1,153]},{39:154,42:$VY},{10:$VF,40:156},{42:[1,157]},{39:158,42:$VY},{39:159,42:$VY},o($VD,[2,71]),{9:$Vc,33:160,42:$Vd,60:$Ve,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},o($V8,[2,63]),o($VQ,[2,67]),o($VW,[2,34]),o($VX,[2,14]),o($VX,[2,25]),o($VX,[2,26]),o($VX,[2,27]),{14:[1,161],72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC},o($Va,$Vb),{9:$Vc,33:111,42:$Vd,43:[1,163],60:$Ve,70:162,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{64:[1,164]},{10:$VF,40:165},{9:$Vc,33:166,42:$Vd,60:$Ve,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{38:[1,167]},{9:$V0,16:169,17:170,34:133,47:168,57:$V1,58:$V2,59:$V3,60:$V4,61:$V5},{10:$VF,40:171},{10:[1,172]},o($VQ,[2,69],{72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC}),o($VX,[2,28]),{37:$VV,43:[1,173]},{14:[1,174]},{63:[1,175]},o($VX,[2,33]),{43:[1,176],72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC},{39:177,42:$VY},{9:$Vc,33:179,42:$Vd,44:178,60:$Ve,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},o($VZ,[2,42]),o($VZ,[2,43]),o($VX,[2,44],{49:[1,180]}),{12:$V_,51:181,52:182,53:183,54:$V$,56:$V01},{14:[1,186]},o($VX,[2,74]),{65:[1,187],66:[1,188]},o([10,14],[2,38]),{14:[1,189]},{14:[1,190]},{14:[2,39],72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC},{10:$VF,27:192,40:191,48:$VN},{12:$V_,52:193,53:194,54:$V$,56:$V01},{12:[1,195]},o($V11,[2,50]),{55:[1,196]},{9:$Vc,33:197,42:$Vd,60:$Ve,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},o($VX,[2,73]),{42:[1,198]},{42:[1,199]},o($VX,[2,40]),{9:$Vc,33:200,42:$Vd,60:$Ve,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},o($VX,[2,45]),o($VX,[2,46]),{12:[1,201]},o($V11,[2,49]),o($VX,[2,48]),{9:$VG,12:$V21,16:121,17:122,21:203,22:120,23:123,24:124,25:125,26:126,27:127,28:128,29:129,30:$VH,31:$VI,32:$VJ,34:133,38:$VK,41:202,45:$VL,46:$VM,48:$VN,50:$VO,57:$V1,58:$V2,59:$V3,60:$V4,61:$V5,62:$VP},{55:[1,204],72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC},{9:$Vc,33:205,42:$Vd,60:$Ve,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{9:$Vc,33:206,42:$Vd,60:$Ve,71:56,72:$Vf,73:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl},{43:[1,207],72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC},o($VX,[2,47]),{12:[2,52]},o($V11,[2,36],{16:121,17:122,23:123,24:124,25:125,26:126,27:127,28:128,29:129,34:133,22:146,9:$VG,30:$VH,31:$VI,32:$VJ,38:$VK,45:$VL,46:$VM,48:$VN,50:$VO,57:$V1,58:$V2,59:$V3,60:$V4,61:$V5,62:$VP}),o($V11,$V21,{22:120,16:121,17:122,23:123,24:124,25:125,26:126,27:127,28:128,29:129,34:133,21:203,41:208,9:$VG,30:$VH,31:$VI,32:$VJ,38:$VK,45:$VL,46:$VM,48:$VN,50:$VO,57:$V1,58:$V2,59:$V3,60:$V4,61:$V5,62:$VP}),{43:[1,209],72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC},{43:[1,210],72:$Vn,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:$VB,88:$VC},{10:$VF,40:211},o($V11,[2,51]),{14:[1,212]},{14:[1,213]},o($VX,[2,41]),o($VX,[2,60]),o($VX,[2,61])],
defaultActions: {3:[2,2],7:[2,1],28:[2,54],29:[2,55],30:[2,56],31:[2,57],32:[2,58],34:[2,4],41:[2,3],202:[2,52]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Primitive} = require('../Expresiones/Primitive');
    const {Aritmetica} = require('../Expresiones/Aritmetica');
    const {Relacional} = require('../Expresiones/Relacional');
    /*const {Continue} = require('../Expresiones/Continue');
    const {Break} = require('../Expresiones/Break');*/
    const {Logica} = require('../Expresiones/Logica');
    const {LogicaNot} = require('../Expresiones/LogicaNot');
    
    const {Identificador} = require('../Expresiones/Identificador');
    const {Imprimir} = require('../Instrucciones/Imprimir');
    const {If} = require('../Instrucciones/If');
    const {While} = require('../Instrucciones/While');
    const {DoWhile} = require('../Instrucciones/DoWhile');
    const {For} = require('../Instrucciones/For');
    const {Switch} = require('../Instrucciones/Switch');
    const {CaseSwitch} = require('../Instrucciones/CaseSwitch');
    const {DefaultSwitch} = require('../Instrucciones/DefaultSwitch');

    const {Clase} = require('../ClasesF/Clase');
    const {Continue} = require('../ClasesF/Continue');
    const {Break} = require('../ClasesF/Break');

    const {ReturnM} = require('../ClasesF/ReturnM');
    const {ReturnF} = require('../ClasesF/ReturnF');

    const {VoidMain} = require('../ClasesF/VoidMain');
    const {Metodo} = require('../ClasesF/Metodo');
    const {Parametros} = require('../ClasesF/Parametros');
    const {Funcion} = require('../ClasesF/Funcion');
    const {ParametroCall} = require('../ClasesF/ParametroCall');
    const {LlamadaF} = require('../ClasesF/LlamadaF');
    
    const {Declaracion} = require('../Instrucciones/Declaracion');
    const {Asignacion} = require('../Instrucciones/Asignacion');
    //const {Excepcion} = require('../utils/Exception');*/
    const {Tipo, types} = require('../Abstracto/Tipo');
    const {Tree} = require('../Simbols/Tree');
    const {ListaErrLex} = require('../Simbols/ListaErrLex');

    const lis_Errores=require('../Errores/LisErrores');
    const NError=require('../Errores/NodeErr');
     
      const {NodeErr}=require('../Errores/NodeErr');

      lis_err = new Array();

      const ls_lex = new ListaErrLex();

      exports.clear_lista_erroes = function () { 
          lis_err = [];
          return 1;
     };
     
      console.log("xxxxxxxx: " + lis_err.length);

      exports.get_lista_erroes = function () { 
          
          console.log("Tamaño Original-----" + lis_err.length);
          console.log(lis_err);
          return lis_err;

          //console.log("Tamaño Original-----" + ls_lex.err_lex.length);
          //return ls_lex.err_lex;
     };


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/*comen unilinea*/
break;
case 2:/*comen multilinea*/
break;
case 3:return 90 
break;
case 4:return 89 
break;
case 5:return 93
break;
case 6:return 60
break;
case 7:return 77
break;
case 8:return 78
break;
case 9:return 75
break;
case 10:return 72
break;
case 11:return 74
break;
case 12:return 76
break;
case 13:return 77
break;
case 14:return 79
break;
case 15:return 80
break;
case 16:return 84
break;
case 17:return 83
break;
case 18:return 81
break;
case 19:return 82
break;
case 20:return 85
break;
case 21:return 86
break;
case 22:return 87
break;
case 23:return 88
break;
case 24:return 73
break;
case 25:return 42
break;
case 26:return 43  
break;
case 27:return 10
break;
case 28:return 12  
break;
case 29:return 14
break;
case 30:return 37
break;
case 31:return 36
break;
case 32:return 57
break;
case 33:return 58
break;
case 34:return 59
break;
case 35:return 60
break;
case 36:return 61
break;
case 37:return 91
break;
case 38:return 92
break;
case 39:return 48
break;
case 40:return 49
break;
case 41:return 50
break;
case 42:return 54
break;
case 43:return 31
break;
case 44:return 56
break;
case 45:return 38
break;
case 46:return 45
break;
case 47:return 46
break;
case 48:return 30
break;
case 49:return 62
break;
case 50:return 64
break;
case 51:return 65
break;
case 52:return 66
break;
case 53:return 63
break;
case 54:return 55
break;
case 55:return 67
break;
case 56:return 68
break;
case 57:return 32
break;
case 58:return 8
break;
case 59:return 13
break;
case 60:return 9
break;
case 61:return 5
break;
case 62:lis_err.push(new NodeErr("Lexico","Caracter invalido", yy_.yytext,yy_.yylloc.first_line, yy_.yylloc.first_column)); console.log(yy_.yytext + " lex, len: " + lis_err.length); //lis_Errores.LisErrores.add(new NError.NodeErr("Lexico","Caracter invalido: "+yy_.yytext,yy_.yylloc.first_line, yy_.yylloc.first_column))
break;
}
},
rules: [/^(?:\s+)/,/^(?:(\/\/.*\r\n)|(\/\/.*\n)|(\/\/.*\r))/,/^(?:\/\*\/*([^*/]|[^*]\/|\*[^/])*\**\*\/)/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:([0-9]+))/,/^(?:(("[^"]*")))/,/^(?:([\'][^\'\n][\']))/,/^(?:\*)/,/^(?:\/)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:\*)/,/^(?:\^)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:,)/,/^(?:=)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:continue\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:\.)/,/^(?::)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:return\b)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}